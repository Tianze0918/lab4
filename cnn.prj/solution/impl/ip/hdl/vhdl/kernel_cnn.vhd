-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_cnn is
generic (
    C_M_AXI_KERNEL_INPUT_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_KERNEL_INPUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_INPUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_INPUT_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_KERNEL_INPUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_INPUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_INPUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_INPUT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_WEIGHT_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_KERNEL_WEIGHT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_WEIGHT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_WEIGHT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_KERNEL_WEIGHT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_WEIGHT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_WEIGHT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_WEIGHT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_OUTPUT_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_KERNEL_OUTPUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_OUTPUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_OUTPUT_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_KERNEL_OUTPUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_OUTPUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_OUTPUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_OUTPUT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_KERNEL_INPUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_KERNEL_INPUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_KERNEL_INPUT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_KERNEL_OUTPUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_KERNEL_OUTPUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_KERNEL_OUTPUT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_KERNEL_WEIGHT_USER_VALUE : INTEGER := 0;
    C_M_AXI_KERNEL_WEIGHT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_KERNEL_WEIGHT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_kernel_input_AWVALID : OUT STD_LOGIC;
    m_axi_kernel_input_AWREADY : IN STD_LOGIC;
    m_axi_kernel_input_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_INPUT_ADDR_WIDTH-1 downto 0);
    m_axi_kernel_input_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_INPUT_ID_WIDTH-1 downto 0);
    m_axi_kernel_input_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_kernel_input_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_input_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_input_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_input_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_input_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_input_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_input_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_input_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_INPUT_AWUSER_WIDTH-1 downto 0);
    m_axi_kernel_input_WVALID : OUT STD_LOGIC;
    m_axi_kernel_input_WREADY : IN STD_LOGIC;
    m_axi_kernel_input_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_INPUT_DATA_WIDTH-1 downto 0);
    m_axi_kernel_input_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_INPUT_DATA_WIDTH/8-1 downto 0);
    m_axi_kernel_input_WLAST : OUT STD_LOGIC;
    m_axi_kernel_input_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_INPUT_ID_WIDTH-1 downto 0);
    m_axi_kernel_input_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_INPUT_WUSER_WIDTH-1 downto 0);
    m_axi_kernel_input_ARVALID : OUT STD_LOGIC;
    m_axi_kernel_input_ARREADY : IN STD_LOGIC;
    m_axi_kernel_input_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_INPUT_ADDR_WIDTH-1 downto 0);
    m_axi_kernel_input_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_INPUT_ID_WIDTH-1 downto 0);
    m_axi_kernel_input_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_kernel_input_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_input_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_input_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_input_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_input_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_input_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_input_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_input_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_INPUT_ARUSER_WIDTH-1 downto 0);
    m_axi_kernel_input_RVALID : IN STD_LOGIC;
    m_axi_kernel_input_RREADY : OUT STD_LOGIC;
    m_axi_kernel_input_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_INPUT_DATA_WIDTH-1 downto 0);
    m_axi_kernel_input_RLAST : IN STD_LOGIC;
    m_axi_kernel_input_RID : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_INPUT_ID_WIDTH-1 downto 0);
    m_axi_kernel_input_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_INPUT_RUSER_WIDTH-1 downto 0);
    m_axi_kernel_input_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_input_BVALID : IN STD_LOGIC;
    m_axi_kernel_input_BREADY : OUT STD_LOGIC;
    m_axi_kernel_input_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_input_BID : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_INPUT_ID_WIDTH-1 downto 0);
    m_axi_kernel_input_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_INPUT_BUSER_WIDTH-1 downto 0);
    m_axi_kernel_weight_AWVALID : OUT STD_LOGIC;
    m_axi_kernel_weight_AWREADY : IN STD_LOGIC;
    m_axi_kernel_weight_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_WEIGHT_ADDR_WIDTH-1 downto 0);
    m_axi_kernel_weight_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_kernel_weight_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_kernel_weight_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_weight_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_weight_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_weight_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_weight_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_weight_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_weight_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_weight_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_WEIGHT_AWUSER_WIDTH-1 downto 0);
    m_axi_kernel_weight_WVALID : OUT STD_LOGIC;
    m_axi_kernel_weight_WREADY : IN STD_LOGIC;
    m_axi_kernel_weight_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_WEIGHT_DATA_WIDTH-1 downto 0);
    m_axi_kernel_weight_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_WEIGHT_DATA_WIDTH/8-1 downto 0);
    m_axi_kernel_weight_WLAST : OUT STD_LOGIC;
    m_axi_kernel_weight_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_kernel_weight_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_WEIGHT_WUSER_WIDTH-1 downto 0);
    m_axi_kernel_weight_ARVALID : OUT STD_LOGIC;
    m_axi_kernel_weight_ARREADY : IN STD_LOGIC;
    m_axi_kernel_weight_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_WEIGHT_ADDR_WIDTH-1 downto 0);
    m_axi_kernel_weight_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_kernel_weight_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_kernel_weight_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_weight_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_weight_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_weight_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_weight_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_weight_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_weight_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_weight_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_WEIGHT_ARUSER_WIDTH-1 downto 0);
    m_axi_kernel_weight_RVALID : IN STD_LOGIC;
    m_axi_kernel_weight_RREADY : OUT STD_LOGIC;
    m_axi_kernel_weight_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_WEIGHT_DATA_WIDTH-1 downto 0);
    m_axi_kernel_weight_RLAST : IN STD_LOGIC;
    m_axi_kernel_weight_RID : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_kernel_weight_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_WEIGHT_RUSER_WIDTH-1 downto 0);
    m_axi_kernel_weight_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_weight_BVALID : IN STD_LOGIC;
    m_axi_kernel_weight_BREADY : OUT STD_LOGIC;
    m_axi_kernel_weight_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_weight_BID : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_kernel_weight_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_WEIGHT_BUSER_WIDTH-1 downto 0);
    m_axi_kernel_output_AWVALID : OUT STD_LOGIC;
    m_axi_kernel_output_AWREADY : IN STD_LOGIC;
    m_axi_kernel_output_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_OUTPUT_ADDR_WIDTH-1 downto 0);
    m_axi_kernel_output_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_kernel_output_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_kernel_output_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_output_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_output_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_OUTPUT_AWUSER_WIDTH-1 downto 0);
    m_axi_kernel_output_WVALID : OUT STD_LOGIC;
    m_axi_kernel_output_WREADY : IN STD_LOGIC;
    m_axi_kernel_output_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_OUTPUT_DATA_WIDTH-1 downto 0);
    m_axi_kernel_output_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_OUTPUT_DATA_WIDTH/8-1 downto 0);
    m_axi_kernel_output_WLAST : OUT STD_LOGIC;
    m_axi_kernel_output_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_kernel_output_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_OUTPUT_WUSER_WIDTH-1 downto 0);
    m_axi_kernel_output_ARVALID : OUT STD_LOGIC;
    m_axi_kernel_output_ARREADY : IN STD_LOGIC;
    m_axi_kernel_output_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_OUTPUT_ADDR_WIDTH-1 downto 0);
    m_axi_kernel_output_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_kernel_output_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_kernel_output_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_output_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_output_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_OUTPUT_ARUSER_WIDTH-1 downto 0);
    m_axi_kernel_output_RVALID : IN STD_LOGIC;
    m_axi_kernel_output_RREADY : OUT STD_LOGIC;
    m_axi_kernel_output_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_OUTPUT_DATA_WIDTH-1 downto 0);
    m_axi_kernel_output_RLAST : IN STD_LOGIC;
    m_axi_kernel_output_RID : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_kernel_output_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_OUTPUT_RUSER_WIDTH-1 downto 0);
    m_axi_kernel_output_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_BVALID : IN STD_LOGIC;
    m_axi_kernel_output_BREADY : OUT STD_LOGIC;
    m_axi_kernel_output_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_BID : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_kernel_output_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_OUTPUT_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of kernel_cnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_cnn_kernel_cnn,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.392000,HLS_SYN_LAT=311007698,HLS_SYN_TPT=none,HLS_SYN_MEM=3408,HLS_SYN_DSP=0,HLS_SYN_FF=434370,HLS_SYN_LUT=229759,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal vinput : STD_LOGIC_VECTOR (63 downto 0);
    signal vweight : STD_LOGIC_VECTOR (63 downto 0);
    signal voutput : STD_LOGIC_VECTOR (63 downto 0);
    signal voutput_read_reg_222 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal vweight_read_reg_227 : STD_LOGIC_VECTOR (63 downto 0);
    signal vinput_read_reg_232 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_q4 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_q5 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_q6 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_q7 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_q8 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_q9 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_q10 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_q11 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_q12 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_q13 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_q14 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_q15 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_q16 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q4 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q5 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q6 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q7 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q8 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q9 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q10 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q11 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q12 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q13 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q14 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q15 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_q16 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q4 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q5 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q6 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q7 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q8 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q9 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q10 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q11 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q12 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q13 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q14 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q15 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_q16 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q4 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q5 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q6 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q7 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q8 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q9 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q10 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q11 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q12 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q13 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q14 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q15 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_q16 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_8_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_9_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_10_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_11_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_12_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_13_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_14_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_15_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_ap_start : STD_LOGIC;
    signal grp_cnn_fu_164_ap_done : STD_LOGIC;
    signal grp_cnn_fu_164_ap_idle : STD_LOGIC;
    signal grp_cnn_fu_164_ap_ready : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_input_0_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_address2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce2 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_address3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce3 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_address4 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce4 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_address5 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce5 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_address6 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce6 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_address7 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce7 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_address8 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce8 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_address9 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce9 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_address10 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce10 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_address11 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce11 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_address12 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce12 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_address13 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce13 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_address14 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce14 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_address15 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce15 : STD_LOGIC;
    signal grp_cnn_fu_164_input_0_address16 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_0_ce16 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_input_1_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_address2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce2 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_address3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce3 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_address4 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce4 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_address5 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce5 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_address6 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce6 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_address7 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce7 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_address8 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce8 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_address9 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce9 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_address10 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce10 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_address11 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce11 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_address12 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce12 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_address13 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce13 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_address14 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce14 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_address15 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce15 : STD_LOGIC;
    signal grp_cnn_fu_164_input_1_address16 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_1_ce16 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_input_2_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_address2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce2 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_address3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce3 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_address4 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce4 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_address5 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce5 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_address6 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce6 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_address7 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce7 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_address8 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce8 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_address9 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce9 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_address10 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce10 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_address11 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce11 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_address12 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce12 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_address13 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce13 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_address14 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce14 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_address15 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce15 : STD_LOGIC;
    signal grp_cnn_fu_164_input_2_address16 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_2_ce16 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_input_3_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_address2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce2 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_address3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce3 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_address4 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce4 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_address5 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce5 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_address6 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce6 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_address7 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce7 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_address8 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce8 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_address9 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce9 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_address10 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce10 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_address11 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce11 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_address12 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce12 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_address13 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce13 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_address14 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce14 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_address15 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce15 : STD_LOGIC;
    signal grp_cnn_fu_164_input_3_address16 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cnn_fu_164_input_3_ce16 : STD_LOGIC;
    signal grp_cnn_fu_164_output_0_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_0_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_0_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_0_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_0_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_0_we1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_1_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_1_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_1_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_1_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_1_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_1_we1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_2_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_2_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_2_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_2_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_2_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_2_we1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_3_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_3_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_3_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_3_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_3_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_3_we1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_4_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_4_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_4_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_4_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_4_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_4_we1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_4_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_5_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_5_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_5_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_5_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_5_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_5_we1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_5_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_6_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_6_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_6_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_6_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_6_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_6_we1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_6_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_7_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_7_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_7_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_7_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_7_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_7_we1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_7_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_8_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_8_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_8_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_8_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_8_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_8_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_8_we1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_8_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_9_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_9_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_9_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_9_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_9_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_9_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_9_we1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_9_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_10_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_10_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_10_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_10_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_10_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_10_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_10_we1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_10_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_11_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_11_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_11_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_11_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_11_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_11_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_11_we1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_11_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_12_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_12_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_12_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_12_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_12_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_12_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_12_we1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_12_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_13_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_13_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_13_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_13_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_13_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_13_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_13_we1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_13_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_14_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_14_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_14_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_14_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_14_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_14_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_14_we1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_14_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_15_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_15_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_15_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_output_15_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_output_15_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_output_15_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_15_we1 : STD_LOGIC;
    signal grp_cnn_fu_164_output_15_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_weight_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cnn_fu_164_weight_ce0 : STD_LOGIC;
    signal grp_cnn_fu_164_weight_we0 : STD_LOGIC;
    signal grp_cnn_fu_164_weight_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_weight_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cnn_fu_164_weight_ce1 : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_input_AWVALID : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_input_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_WVALID : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_input_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_WLAST : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_input_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_ARVALID : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_input_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_input_RREADY : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_input_BREADY : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_weight_AWVALID : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_weight_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_WVALID : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_weight_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_WLAST : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_weight_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_ARVALID : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_weight_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_weight_RREADY : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_weight_BREADY : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_output_AWVALID : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_output_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_WVALID : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_output_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_WLAST : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_output_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_ARVALID : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_output_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnn_fu_164_m_axi_kernel_output_RREADY : STD_LOGIC;
    signal grp_cnn_fu_164_m_axi_kernel_output_BREADY : STD_LOGIC;
    signal kernel_input_AWREADY : STD_LOGIC;
    signal kernel_input_WREADY : STD_LOGIC;
    signal kernel_input_ARVALID : STD_LOGIC;
    signal kernel_input_ARREADY : STD_LOGIC;
    signal kernel_input_RVALID : STD_LOGIC;
    signal kernel_input_RREADY : STD_LOGIC;
    signal kernel_input_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal kernel_input_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal kernel_input_BVALID : STD_LOGIC;
    signal kernel_output_AWVALID : STD_LOGIC;
    signal kernel_output_AWREADY : STD_LOGIC;
    signal kernel_output_WVALID : STD_LOGIC;
    signal kernel_output_WREADY : STD_LOGIC;
    signal kernel_output_ARVALID : STD_LOGIC;
    signal kernel_output_ARREADY : STD_LOGIC;
    signal kernel_output_RVALID : STD_LOGIC;
    signal kernel_output_RREADY : STD_LOGIC;
    signal kernel_output_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal kernel_output_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal kernel_output_BVALID : STD_LOGIC;
    signal kernel_output_BREADY : STD_LOGIC;
    signal kernel_weight_AWREADY : STD_LOGIC;
    signal kernel_weight_WREADY : STD_LOGIC;
    signal kernel_weight_ARVALID : STD_LOGIC;
    signal kernel_weight_ARREADY : STD_LOGIC;
    signal kernel_weight_RVALID : STD_LOGIC;
    signal kernel_weight_RREADY : STD_LOGIC;
    signal kernel_weight_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_weight_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal kernel_weight_BVALID : STD_LOGIC;
    signal grp_cnn_fu_164_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call39 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_cnn_cnn IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_we0 : OUT STD_LOGIC;
        input_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce1 : OUT STD_LOGIC;
        input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address2 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce2 : OUT STD_LOGIC;
        input_0_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address3 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce3 : OUT STD_LOGIC;
        input_0_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address4 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce4 : OUT STD_LOGIC;
        input_0_q4 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address5 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce5 : OUT STD_LOGIC;
        input_0_q5 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address6 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce6 : OUT STD_LOGIC;
        input_0_q6 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address7 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce7 : OUT STD_LOGIC;
        input_0_q7 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address8 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce8 : OUT STD_LOGIC;
        input_0_q8 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address9 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce9 : OUT STD_LOGIC;
        input_0_q9 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address10 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce10 : OUT STD_LOGIC;
        input_0_q10 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address11 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce11 : OUT STD_LOGIC;
        input_0_q11 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address12 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce12 : OUT STD_LOGIC;
        input_0_q12 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address13 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce13 : OUT STD_LOGIC;
        input_0_q13 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address14 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce14 : OUT STD_LOGIC;
        input_0_q14 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address15 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce15 : OUT STD_LOGIC;
        input_0_q15 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address16 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_0_ce16 : OUT STD_LOGIC;
        input_0_q16 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce0 : OUT STD_LOGIC;
        input_1_we0 : OUT STD_LOGIC;
        input_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce1 : OUT STD_LOGIC;
        input_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address2 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce2 : OUT STD_LOGIC;
        input_1_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address3 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce3 : OUT STD_LOGIC;
        input_1_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address4 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce4 : OUT STD_LOGIC;
        input_1_q4 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address5 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce5 : OUT STD_LOGIC;
        input_1_q5 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address6 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce6 : OUT STD_LOGIC;
        input_1_q6 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address7 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce7 : OUT STD_LOGIC;
        input_1_q7 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address8 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce8 : OUT STD_LOGIC;
        input_1_q8 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address9 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce9 : OUT STD_LOGIC;
        input_1_q9 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address10 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce10 : OUT STD_LOGIC;
        input_1_q10 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address11 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce11 : OUT STD_LOGIC;
        input_1_q11 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address12 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce12 : OUT STD_LOGIC;
        input_1_q12 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address13 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce13 : OUT STD_LOGIC;
        input_1_q13 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address14 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce14 : OUT STD_LOGIC;
        input_1_q14 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address15 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce15 : OUT STD_LOGIC;
        input_1_q15 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_1_address16 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_1_ce16 : OUT STD_LOGIC;
        input_1_q16 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce0 : OUT STD_LOGIC;
        input_2_we0 : OUT STD_LOGIC;
        input_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce1 : OUT STD_LOGIC;
        input_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address2 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce2 : OUT STD_LOGIC;
        input_2_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address3 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce3 : OUT STD_LOGIC;
        input_2_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address4 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce4 : OUT STD_LOGIC;
        input_2_q4 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address5 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce5 : OUT STD_LOGIC;
        input_2_q5 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address6 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce6 : OUT STD_LOGIC;
        input_2_q6 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address7 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce7 : OUT STD_LOGIC;
        input_2_q7 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address8 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce8 : OUT STD_LOGIC;
        input_2_q8 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address9 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce9 : OUT STD_LOGIC;
        input_2_q9 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address10 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce10 : OUT STD_LOGIC;
        input_2_q10 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address11 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce11 : OUT STD_LOGIC;
        input_2_q11 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address12 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce12 : OUT STD_LOGIC;
        input_2_q12 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address13 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce13 : OUT STD_LOGIC;
        input_2_q13 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address14 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce14 : OUT STD_LOGIC;
        input_2_q14 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address15 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce15 : OUT STD_LOGIC;
        input_2_q15 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_2_address16 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_2_ce16 : OUT STD_LOGIC;
        input_2_q16 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce0 : OUT STD_LOGIC;
        input_3_we0 : OUT STD_LOGIC;
        input_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce1 : OUT STD_LOGIC;
        input_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address2 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce2 : OUT STD_LOGIC;
        input_3_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address3 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce3 : OUT STD_LOGIC;
        input_3_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address4 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce4 : OUT STD_LOGIC;
        input_3_q4 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address5 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce5 : OUT STD_LOGIC;
        input_3_q5 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address6 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce6 : OUT STD_LOGIC;
        input_3_q6 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address7 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce7 : OUT STD_LOGIC;
        input_3_q7 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address8 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce8 : OUT STD_LOGIC;
        input_3_q8 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address9 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce9 : OUT STD_LOGIC;
        input_3_q9 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address10 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce10 : OUT STD_LOGIC;
        input_3_q10 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address11 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce11 : OUT STD_LOGIC;
        input_3_q11 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address12 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce12 : OUT STD_LOGIC;
        input_3_q12 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address13 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce13 : OUT STD_LOGIC;
        input_3_q13 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address14 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce14 : OUT STD_LOGIC;
        input_3_q14 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address15 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce15 : OUT STD_LOGIC;
        input_3_q15 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_3_address16 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_3_ce16 : OUT STD_LOGIC;
        input_3_q16 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_0_ce1 : OUT STD_LOGIC;
        output_0_we1 : OUT STD_LOGIC;
        output_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_1_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_1_ce0 : OUT STD_LOGIC;
        output_1_we0 : OUT STD_LOGIC;
        output_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_1_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_1_ce1 : OUT STD_LOGIC;
        output_1_we1 : OUT STD_LOGIC;
        output_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_2_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_2_ce0 : OUT STD_LOGIC;
        output_2_we0 : OUT STD_LOGIC;
        output_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_2_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_2_ce1 : OUT STD_LOGIC;
        output_2_we1 : OUT STD_LOGIC;
        output_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_3_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_3_ce0 : OUT STD_LOGIC;
        output_3_we0 : OUT STD_LOGIC;
        output_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_3_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_3_ce1 : OUT STD_LOGIC;
        output_3_we1 : OUT STD_LOGIC;
        output_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_4_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_4_ce0 : OUT STD_LOGIC;
        output_4_we0 : OUT STD_LOGIC;
        output_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_4_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_4_ce1 : OUT STD_LOGIC;
        output_4_we1 : OUT STD_LOGIC;
        output_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_5_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_5_ce0 : OUT STD_LOGIC;
        output_5_we0 : OUT STD_LOGIC;
        output_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_5_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_5_ce1 : OUT STD_LOGIC;
        output_5_we1 : OUT STD_LOGIC;
        output_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_6_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_6_ce0 : OUT STD_LOGIC;
        output_6_we0 : OUT STD_LOGIC;
        output_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_6_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_6_ce1 : OUT STD_LOGIC;
        output_6_we1 : OUT STD_LOGIC;
        output_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_7_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_7_ce0 : OUT STD_LOGIC;
        output_7_we0 : OUT STD_LOGIC;
        output_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_7_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_7_ce1 : OUT STD_LOGIC;
        output_7_we1 : OUT STD_LOGIC;
        output_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_8_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_8_ce0 : OUT STD_LOGIC;
        output_8_we0 : OUT STD_LOGIC;
        output_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_8_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_8_ce1 : OUT STD_LOGIC;
        output_8_we1 : OUT STD_LOGIC;
        output_8_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_8_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_9_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_9_ce0 : OUT STD_LOGIC;
        output_9_we0 : OUT STD_LOGIC;
        output_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_9_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_9_ce1 : OUT STD_LOGIC;
        output_9_we1 : OUT STD_LOGIC;
        output_9_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_9_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_10_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_10_ce0 : OUT STD_LOGIC;
        output_10_we0 : OUT STD_LOGIC;
        output_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_10_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_10_ce1 : OUT STD_LOGIC;
        output_10_we1 : OUT STD_LOGIC;
        output_10_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_10_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_11_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_11_ce0 : OUT STD_LOGIC;
        output_11_we0 : OUT STD_LOGIC;
        output_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_11_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_11_ce1 : OUT STD_LOGIC;
        output_11_we1 : OUT STD_LOGIC;
        output_11_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_11_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_12_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_12_ce0 : OUT STD_LOGIC;
        output_12_we0 : OUT STD_LOGIC;
        output_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_12_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_12_ce1 : OUT STD_LOGIC;
        output_12_we1 : OUT STD_LOGIC;
        output_12_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_12_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_13_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_13_ce0 : OUT STD_LOGIC;
        output_13_we0 : OUT STD_LOGIC;
        output_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_13_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_13_ce1 : OUT STD_LOGIC;
        output_13_we1 : OUT STD_LOGIC;
        output_13_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_13_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_14_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_14_ce0 : OUT STD_LOGIC;
        output_14_we0 : OUT STD_LOGIC;
        output_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_14_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_14_ce1 : OUT STD_LOGIC;
        output_14_we1 : OUT STD_LOGIC;
        output_14_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_14_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_15_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_15_ce0 : OUT STD_LOGIC;
        output_15_we0 : OUT STD_LOGIC;
        output_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_15_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_15_ce1 : OUT STD_LOGIC;
        output_15_we1 : OUT STD_LOGIC;
        output_15_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_15_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        weight_ce0 : OUT STD_LOGIC;
        weight_we0 : OUT STD_LOGIC;
        weight_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        weight_ce1 : OUT STD_LOGIC;
        weight_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kernel_input_AWVALID : OUT STD_LOGIC;
        m_axi_kernel_input_AWREADY : IN STD_LOGIC;
        m_axi_kernel_input_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_kernel_input_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_input_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kernel_input_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kernel_input_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_input_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_input_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_input_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kernel_input_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_input_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_input_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_input_WVALID : OUT STD_LOGIC;
        m_axi_kernel_input_WREADY : IN STD_LOGIC;
        m_axi_kernel_input_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_kernel_input_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_kernel_input_WLAST : OUT STD_LOGIC;
        m_axi_kernel_input_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_input_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_input_ARVALID : OUT STD_LOGIC;
        m_axi_kernel_input_ARREADY : IN STD_LOGIC;
        m_axi_kernel_input_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_kernel_input_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_input_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kernel_input_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kernel_input_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_input_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_input_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_input_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kernel_input_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_input_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_input_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_input_RVALID : IN STD_LOGIC;
        m_axi_kernel_input_RREADY : OUT STD_LOGIC;
        m_axi_kernel_input_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_kernel_input_RLAST : IN STD_LOGIC;
        m_axi_kernel_input_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_input_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_kernel_input_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_input_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_input_BVALID : IN STD_LOGIC;
        m_axi_kernel_input_BREADY : OUT STD_LOGIC;
        m_axi_kernel_input_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_input_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_input_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        vinput : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_kernel_weight_AWVALID : OUT STD_LOGIC;
        m_axi_kernel_weight_AWREADY : IN STD_LOGIC;
        m_axi_kernel_weight_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_kernel_weight_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_weight_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kernel_weight_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kernel_weight_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_weight_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_weight_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_weight_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kernel_weight_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_weight_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_weight_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_weight_WVALID : OUT STD_LOGIC;
        m_axi_kernel_weight_WREADY : IN STD_LOGIC;
        m_axi_kernel_weight_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kernel_weight_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_weight_WLAST : OUT STD_LOGIC;
        m_axi_kernel_weight_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_weight_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_weight_ARVALID : OUT STD_LOGIC;
        m_axi_kernel_weight_ARREADY : IN STD_LOGIC;
        m_axi_kernel_weight_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_kernel_weight_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_weight_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kernel_weight_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kernel_weight_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_weight_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_weight_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_weight_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kernel_weight_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_weight_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_weight_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_weight_RVALID : IN STD_LOGIC;
        m_axi_kernel_weight_RREADY : OUT STD_LOGIC;
        m_axi_kernel_weight_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kernel_weight_RLAST : IN STD_LOGIC;
        m_axi_kernel_weight_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_weight_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_kernel_weight_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_weight_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_weight_BVALID : IN STD_LOGIC;
        m_axi_kernel_weight_BREADY : OUT STD_LOGIC;
        m_axi_kernel_weight_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_weight_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_weight_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        vweight : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_kernel_output_AWVALID : OUT STD_LOGIC;
        m_axi_kernel_output_AWREADY : IN STD_LOGIC;
        m_axi_kernel_output_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_kernel_output_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_output_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kernel_output_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kernel_output_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_output_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_output_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_output_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kernel_output_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_output_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_output_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_output_WVALID : OUT STD_LOGIC;
        m_axi_kernel_output_WREADY : IN STD_LOGIC;
        m_axi_kernel_output_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_kernel_output_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_kernel_output_WLAST : OUT STD_LOGIC;
        m_axi_kernel_output_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_output_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_output_ARVALID : OUT STD_LOGIC;
        m_axi_kernel_output_ARREADY : IN STD_LOGIC;
        m_axi_kernel_output_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_kernel_output_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_output_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kernel_output_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kernel_output_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_output_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_output_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_output_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kernel_output_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_output_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_output_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_output_RVALID : IN STD_LOGIC;
        m_axi_kernel_output_RREADY : OUT STD_LOGIC;
        m_axi_kernel_output_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_kernel_output_RLAST : IN STD_LOGIC;
        m_axi_kernel_output_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_output_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_kernel_output_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_output_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_output_BVALID : IN STD_LOGIC;
        m_axi_kernel_output_BREADY : OUT STD_LOGIC;
        m_axi_kernel_output_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_output_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_output_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        voutput : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_cnn_input_RAM_1WNR_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address3 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address4 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address5 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address6 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address7 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address8 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address9 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address10 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address11 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address12 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address13 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address14 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address15 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce15 : IN STD_LOGIC;
        q15 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address16 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce16 : IN STD_LOGIC;
        q16 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_cnn_output_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_cnn_weight_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_cnn_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        vinput : OUT STD_LOGIC_VECTOR (63 downto 0);
        vweight : OUT STD_LOGIC_VECTOR (63 downto 0);
        voutput : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component kernel_cnn_kernel_input_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component kernel_cnn_kernel_output_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component kernel_cnn_kernel_weight_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    input_U : component kernel_cnn_input_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 12996,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_input_0_address0,
        ce0 => grp_cnn_fu_164_input_0_ce0,
        we0 => grp_cnn_fu_164_input_0_we0,
        d0 => grp_cnn_fu_164_input_0_d0,
        q0 => input_q0,
        address1 => grp_cnn_fu_164_input_0_address1,
        ce1 => grp_cnn_fu_164_input_0_ce1,
        q1 => input_q1,
        address2 => grp_cnn_fu_164_input_0_address2,
        ce2 => grp_cnn_fu_164_input_0_ce2,
        q2 => input_q2,
        address3 => grp_cnn_fu_164_input_0_address3,
        ce3 => grp_cnn_fu_164_input_0_ce3,
        q3 => input_q3,
        address4 => grp_cnn_fu_164_input_0_address4,
        ce4 => grp_cnn_fu_164_input_0_ce4,
        q4 => input_q4,
        address5 => grp_cnn_fu_164_input_0_address5,
        ce5 => grp_cnn_fu_164_input_0_ce5,
        q5 => input_q5,
        address6 => grp_cnn_fu_164_input_0_address6,
        ce6 => grp_cnn_fu_164_input_0_ce6,
        q6 => input_q6,
        address7 => grp_cnn_fu_164_input_0_address7,
        ce7 => grp_cnn_fu_164_input_0_ce7,
        q7 => input_q7,
        address8 => grp_cnn_fu_164_input_0_address8,
        ce8 => grp_cnn_fu_164_input_0_ce8,
        q8 => input_q8,
        address9 => grp_cnn_fu_164_input_0_address9,
        ce9 => grp_cnn_fu_164_input_0_ce9,
        q9 => input_q9,
        address10 => grp_cnn_fu_164_input_0_address10,
        ce10 => grp_cnn_fu_164_input_0_ce10,
        q10 => input_q10,
        address11 => grp_cnn_fu_164_input_0_address11,
        ce11 => grp_cnn_fu_164_input_0_ce11,
        q11 => input_q11,
        address12 => grp_cnn_fu_164_input_0_address12,
        ce12 => grp_cnn_fu_164_input_0_ce12,
        q12 => input_q12,
        address13 => grp_cnn_fu_164_input_0_address13,
        ce13 => grp_cnn_fu_164_input_0_ce13,
        q13 => input_q13,
        address14 => grp_cnn_fu_164_input_0_address14,
        ce14 => grp_cnn_fu_164_input_0_ce14,
        q14 => input_q14,
        address15 => grp_cnn_fu_164_input_0_address15,
        ce15 => grp_cnn_fu_164_input_0_ce15,
        q15 => input_q15,
        address16 => grp_cnn_fu_164_input_0_address16,
        ce16 => grp_cnn_fu_164_input_0_ce16,
        q16 => input_q16);

    input_1_U : component kernel_cnn_input_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 12996,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_input_1_address0,
        ce0 => grp_cnn_fu_164_input_1_ce0,
        we0 => grp_cnn_fu_164_input_1_we0,
        d0 => grp_cnn_fu_164_input_1_d0,
        q0 => input_1_q0,
        address1 => grp_cnn_fu_164_input_1_address1,
        ce1 => grp_cnn_fu_164_input_1_ce1,
        q1 => input_1_q1,
        address2 => grp_cnn_fu_164_input_1_address2,
        ce2 => grp_cnn_fu_164_input_1_ce2,
        q2 => input_1_q2,
        address3 => grp_cnn_fu_164_input_1_address3,
        ce3 => grp_cnn_fu_164_input_1_ce3,
        q3 => input_1_q3,
        address4 => grp_cnn_fu_164_input_1_address4,
        ce4 => grp_cnn_fu_164_input_1_ce4,
        q4 => input_1_q4,
        address5 => grp_cnn_fu_164_input_1_address5,
        ce5 => grp_cnn_fu_164_input_1_ce5,
        q5 => input_1_q5,
        address6 => grp_cnn_fu_164_input_1_address6,
        ce6 => grp_cnn_fu_164_input_1_ce6,
        q6 => input_1_q6,
        address7 => grp_cnn_fu_164_input_1_address7,
        ce7 => grp_cnn_fu_164_input_1_ce7,
        q7 => input_1_q7,
        address8 => grp_cnn_fu_164_input_1_address8,
        ce8 => grp_cnn_fu_164_input_1_ce8,
        q8 => input_1_q8,
        address9 => grp_cnn_fu_164_input_1_address9,
        ce9 => grp_cnn_fu_164_input_1_ce9,
        q9 => input_1_q9,
        address10 => grp_cnn_fu_164_input_1_address10,
        ce10 => grp_cnn_fu_164_input_1_ce10,
        q10 => input_1_q10,
        address11 => grp_cnn_fu_164_input_1_address11,
        ce11 => grp_cnn_fu_164_input_1_ce11,
        q11 => input_1_q11,
        address12 => grp_cnn_fu_164_input_1_address12,
        ce12 => grp_cnn_fu_164_input_1_ce12,
        q12 => input_1_q12,
        address13 => grp_cnn_fu_164_input_1_address13,
        ce13 => grp_cnn_fu_164_input_1_ce13,
        q13 => input_1_q13,
        address14 => grp_cnn_fu_164_input_1_address14,
        ce14 => grp_cnn_fu_164_input_1_ce14,
        q14 => input_1_q14,
        address15 => grp_cnn_fu_164_input_1_address15,
        ce15 => grp_cnn_fu_164_input_1_ce15,
        q15 => input_1_q15,
        address16 => grp_cnn_fu_164_input_1_address16,
        ce16 => grp_cnn_fu_164_input_1_ce16,
        q16 => input_1_q16);

    input_2_U : component kernel_cnn_input_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 12996,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_input_2_address0,
        ce0 => grp_cnn_fu_164_input_2_ce0,
        we0 => grp_cnn_fu_164_input_2_we0,
        d0 => grp_cnn_fu_164_input_2_d0,
        q0 => input_2_q0,
        address1 => grp_cnn_fu_164_input_2_address1,
        ce1 => grp_cnn_fu_164_input_2_ce1,
        q1 => input_2_q1,
        address2 => grp_cnn_fu_164_input_2_address2,
        ce2 => grp_cnn_fu_164_input_2_ce2,
        q2 => input_2_q2,
        address3 => grp_cnn_fu_164_input_2_address3,
        ce3 => grp_cnn_fu_164_input_2_ce3,
        q3 => input_2_q3,
        address4 => grp_cnn_fu_164_input_2_address4,
        ce4 => grp_cnn_fu_164_input_2_ce4,
        q4 => input_2_q4,
        address5 => grp_cnn_fu_164_input_2_address5,
        ce5 => grp_cnn_fu_164_input_2_ce5,
        q5 => input_2_q5,
        address6 => grp_cnn_fu_164_input_2_address6,
        ce6 => grp_cnn_fu_164_input_2_ce6,
        q6 => input_2_q6,
        address7 => grp_cnn_fu_164_input_2_address7,
        ce7 => grp_cnn_fu_164_input_2_ce7,
        q7 => input_2_q7,
        address8 => grp_cnn_fu_164_input_2_address8,
        ce8 => grp_cnn_fu_164_input_2_ce8,
        q8 => input_2_q8,
        address9 => grp_cnn_fu_164_input_2_address9,
        ce9 => grp_cnn_fu_164_input_2_ce9,
        q9 => input_2_q9,
        address10 => grp_cnn_fu_164_input_2_address10,
        ce10 => grp_cnn_fu_164_input_2_ce10,
        q10 => input_2_q10,
        address11 => grp_cnn_fu_164_input_2_address11,
        ce11 => grp_cnn_fu_164_input_2_ce11,
        q11 => input_2_q11,
        address12 => grp_cnn_fu_164_input_2_address12,
        ce12 => grp_cnn_fu_164_input_2_ce12,
        q12 => input_2_q12,
        address13 => grp_cnn_fu_164_input_2_address13,
        ce13 => grp_cnn_fu_164_input_2_ce13,
        q13 => input_2_q13,
        address14 => grp_cnn_fu_164_input_2_address14,
        ce14 => grp_cnn_fu_164_input_2_ce14,
        q14 => input_2_q14,
        address15 => grp_cnn_fu_164_input_2_address15,
        ce15 => grp_cnn_fu_164_input_2_ce15,
        q15 => input_2_q15,
        address16 => grp_cnn_fu_164_input_2_address16,
        ce16 => grp_cnn_fu_164_input_2_ce16,
        q16 => input_2_q16);

    input_3_U : component kernel_cnn_input_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 12996,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_input_3_address0,
        ce0 => grp_cnn_fu_164_input_3_ce0,
        we0 => grp_cnn_fu_164_input_3_we0,
        d0 => grp_cnn_fu_164_input_3_d0,
        q0 => input_3_q0,
        address1 => grp_cnn_fu_164_input_3_address1,
        ce1 => grp_cnn_fu_164_input_3_ce1,
        q1 => input_3_q1,
        address2 => grp_cnn_fu_164_input_3_address2,
        ce2 => grp_cnn_fu_164_input_3_ce2,
        q2 => input_3_q2,
        address3 => grp_cnn_fu_164_input_3_address3,
        ce3 => grp_cnn_fu_164_input_3_ce3,
        q3 => input_3_q3,
        address4 => grp_cnn_fu_164_input_3_address4,
        ce4 => grp_cnn_fu_164_input_3_ce4,
        q4 => input_3_q4,
        address5 => grp_cnn_fu_164_input_3_address5,
        ce5 => grp_cnn_fu_164_input_3_ce5,
        q5 => input_3_q5,
        address6 => grp_cnn_fu_164_input_3_address6,
        ce6 => grp_cnn_fu_164_input_3_ce6,
        q6 => input_3_q6,
        address7 => grp_cnn_fu_164_input_3_address7,
        ce7 => grp_cnn_fu_164_input_3_ce7,
        q7 => input_3_q7,
        address8 => grp_cnn_fu_164_input_3_address8,
        ce8 => grp_cnn_fu_164_input_3_ce8,
        q8 => input_3_q8,
        address9 => grp_cnn_fu_164_input_3_address9,
        ce9 => grp_cnn_fu_164_input_3_ce9,
        q9 => input_3_q9,
        address10 => grp_cnn_fu_164_input_3_address10,
        ce10 => grp_cnn_fu_164_input_3_ce10,
        q10 => input_3_q10,
        address11 => grp_cnn_fu_164_input_3_address11,
        ce11 => grp_cnn_fu_164_input_3_ce11,
        q11 => input_3_q11,
        address12 => grp_cnn_fu_164_input_3_address12,
        ce12 => grp_cnn_fu_164_input_3_ce12,
        q12 => input_3_q12,
        address13 => grp_cnn_fu_164_input_3_address13,
        ce13 => grp_cnn_fu_164_input_3_ce13,
        q13 => input_3_q13,
        address14 => grp_cnn_fu_164_input_3_address14,
        ce14 => grp_cnn_fu_164_input_3_ce14,
        q14 => input_3_q14,
        address15 => grp_cnn_fu_164_input_3_address15,
        ce15 => grp_cnn_fu_164_input_3_ce15,
        q15 => input_3_q15,
        address16 => grp_cnn_fu_164_input_3_address16,
        ce16 => grp_cnn_fu_164_input_3_ce16,
        q16 => input_3_q16);

    output_U : component kernel_cnn_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_output_0_address0,
        ce0 => grp_cnn_fu_164_output_0_ce0,
        we0 => grp_cnn_fu_164_output_0_we0,
        d0 => grp_cnn_fu_164_output_0_d0,
        q0 => output_q0,
        address1 => grp_cnn_fu_164_output_0_address1,
        ce1 => grp_cnn_fu_164_output_0_ce1,
        we1 => grp_cnn_fu_164_output_0_we1,
        d1 => grp_cnn_fu_164_output_0_d1,
        q1 => output_q1);

    output_1_U : component kernel_cnn_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_output_1_address0,
        ce0 => grp_cnn_fu_164_output_1_ce0,
        we0 => grp_cnn_fu_164_output_1_we0,
        d0 => grp_cnn_fu_164_output_1_d0,
        q0 => output_1_q0,
        address1 => grp_cnn_fu_164_output_1_address1,
        ce1 => grp_cnn_fu_164_output_1_ce1,
        we1 => grp_cnn_fu_164_output_1_we1,
        d1 => grp_cnn_fu_164_output_1_d1,
        q1 => output_1_q1);

    output_2_U : component kernel_cnn_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_output_2_address0,
        ce0 => grp_cnn_fu_164_output_2_ce0,
        we0 => grp_cnn_fu_164_output_2_we0,
        d0 => grp_cnn_fu_164_output_2_d0,
        q0 => output_2_q0,
        address1 => grp_cnn_fu_164_output_2_address1,
        ce1 => grp_cnn_fu_164_output_2_ce1,
        we1 => grp_cnn_fu_164_output_2_we1,
        d1 => grp_cnn_fu_164_output_2_d1,
        q1 => output_2_q1);

    output_3_U : component kernel_cnn_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_output_3_address0,
        ce0 => grp_cnn_fu_164_output_3_ce0,
        we0 => grp_cnn_fu_164_output_3_we0,
        d0 => grp_cnn_fu_164_output_3_d0,
        q0 => output_3_q0,
        address1 => grp_cnn_fu_164_output_3_address1,
        ce1 => grp_cnn_fu_164_output_3_ce1,
        we1 => grp_cnn_fu_164_output_3_we1,
        d1 => grp_cnn_fu_164_output_3_d1,
        q1 => output_3_q1);

    output_4_U : component kernel_cnn_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_output_4_address0,
        ce0 => grp_cnn_fu_164_output_4_ce0,
        we0 => grp_cnn_fu_164_output_4_we0,
        d0 => grp_cnn_fu_164_output_4_d0,
        q0 => output_4_q0,
        address1 => grp_cnn_fu_164_output_4_address1,
        ce1 => grp_cnn_fu_164_output_4_ce1,
        we1 => grp_cnn_fu_164_output_4_we1,
        d1 => grp_cnn_fu_164_output_4_d1,
        q1 => output_4_q1);

    output_5_U : component kernel_cnn_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_output_5_address0,
        ce0 => grp_cnn_fu_164_output_5_ce0,
        we0 => grp_cnn_fu_164_output_5_we0,
        d0 => grp_cnn_fu_164_output_5_d0,
        q0 => output_5_q0,
        address1 => grp_cnn_fu_164_output_5_address1,
        ce1 => grp_cnn_fu_164_output_5_ce1,
        we1 => grp_cnn_fu_164_output_5_we1,
        d1 => grp_cnn_fu_164_output_5_d1,
        q1 => output_5_q1);

    output_6_U : component kernel_cnn_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_output_6_address0,
        ce0 => grp_cnn_fu_164_output_6_ce0,
        we0 => grp_cnn_fu_164_output_6_we0,
        d0 => grp_cnn_fu_164_output_6_d0,
        q0 => output_6_q0,
        address1 => grp_cnn_fu_164_output_6_address1,
        ce1 => grp_cnn_fu_164_output_6_ce1,
        we1 => grp_cnn_fu_164_output_6_we1,
        d1 => grp_cnn_fu_164_output_6_d1,
        q1 => output_6_q1);

    output_7_U : component kernel_cnn_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_output_7_address0,
        ce0 => grp_cnn_fu_164_output_7_ce0,
        we0 => grp_cnn_fu_164_output_7_we0,
        d0 => grp_cnn_fu_164_output_7_d0,
        q0 => output_7_q0,
        address1 => grp_cnn_fu_164_output_7_address1,
        ce1 => grp_cnn_fu_164_output_7_ce1,
        we1 => grp_cnn_fu_164_output_7_we1,
        d1 => grp_cnn_fu_164_output_7_d1,
        q1 => output_7_q1);

    output_8_U : component kernel_cnn_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_output_8_address0,
        ce0 => grp_cnn_fu_164_output_8_ce0,
        we0 => grp_cnn_fu_164_output_8_we0,
        d0 => grp_cnn_fu_164_output_8_d0,
        q0 => output_8_q0,
        address1 => grp_cnn_fu_164_output_8_address1,
        ce1 => grp_cnn_fu_164_output_8_ce1,
        we1 => grp_cnn_fu_164_output_8_we1,
        d1 => grp_cnn_fu_164_output_8_d1,
        q1 => output_8_q1);

    output_9_U : component kernel_cnn_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_output_9_address0,
        ce0 => grp_cnn_fu_164_output_9_ce0,
        we0 => grp_cnn_fu_164_output_9_we0,
        d0 => grp_cnn_fu_164_output_9_d0,
        q0 => output_9_q0,
        address1 => grp_cnn_fu_164_output_9_address1,
        ce1 => grp_cnn_fu_164_output_9_ce1,
        we1 => grp_cnn_fu_164_output_9_we1,
        d1 => grp_cnn_fu_164_output_9_d1,
        q1 => output_9_q1);

    output_10_U : component kernel_cnn_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_output_10_address0,
        ce0 => grp_cnn_fu_164_output_10_ce0,
        we0 => grp_cnn_fu_164_output_10_we0,
        d0 => grp_cnn_fu_164_output_10_d0,
        q0 => output_10_q0,
        address1 => grp_cnn_fu_164_output_10_address1,
        ce1 => grp_cnn_fu_164_output_10_ce1,
        we1 => grp_cnn_fu_164_output_10_we1,
        d1 => grp_cnn_fu_164_output_10_d1,
        q1 => output_10_q1);

    output_11_U : component kernel_cnn_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_output_11_address0,
        ce0 => grp_cnn_fu_164_output_11_ce0,
        we0 => grp_cnn_fu_164_output_11_we0,
        d0 => grp_cnn_fu_164_output_11_d0,
        q0 => output_11_q0,
        address1 => grp_cnn_fu_164_output_11_address1,
        ce1 => grp_cnn_fu_164_output_11_ce1,
        we1 => grp_cnn_fu_164_output_11_we1,
        d1 => grp_cnn_fu_164_output_11_d1,
        q1 => output_11_q1);

    output_12_U : component kernel_cnn_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_output_12_address0,
        ce0 => grp_cnn_fu_164_output_12_ce0,
        we0 => grp_cnn_fu_164_output_12_we0,
        d0 => grp_cnn_fu_164_output_12_d0,
        q0 => output_12_q0,
        address1 => grp_cnn_fu_164_output_12_address1,
        ce1 => grp_cnn_fu_164_output_12_ce1,
        we1 => grp_cnn_fu_164_output_12_we1,
        d1 => grp_cnn_fu_164_output_12_d1,
        q1 => output_12_q1);

    output_13_U : component kernel_cnn_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_output_13_address0,
        ce0 => grp_cnn_fu_164_output_13_ce0,
        we0 => grp_cnn_fu_164_output_13_we0,
        d0 => grp_cnn_fu_164_output_13_d0,
        q0 => output_13_q0,
        address1 => grp_cnn_fu_164_output_13_address1,
        ce1 => grp_cnn_fu_164_output_13_ce1,
        we1 => grp_cnn_fu_164_output_13_we1,
        d1 => grp_cnn_fu_164_output_13_d1,
        q1 => output_13_q1);

    output_14_U : component kernel_cnn_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_output_14_address0,
        ce0 => grp_cnn_fu_164_output_14_ce0,
        we0 => grp_cnn_fu_164_output_14_we0,
        d0 => grp_cnn_fu_164_output_14_d0,
        q0 => output_14_q0,
        address1 => grp_cnn_fu_164_output_14_address1,
        ce1 => grp_cnn_fu_164_output_14_ce1,
        we1 => grp_cnn_fu_164_output_14_we1,
        d1 => grp_cnn_fu_164_output_14_d1,
        q1 => output_14_q1);

    output_15_U : component kernel_cnn_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 50176,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_output_15_address0,
        ce0 => grp_cnn_fu_164_output_15_ce0,
        we0 => grp_cnn_fu_164_output_15_we0,
        d0 => grp_cnn_fu_164_output_15_d0,
        q0 => output_15_q0,
        address1 => grp_cnn_fu_164_output_15_address1,
        ce1 => grp_cnn_fu_164_output_15_ce1,
        we1 => grp_cnn_fu_164_output_15_we1,
        d1 => grp_cnn_fu_164_output_15_d1,
        q1 => output_15_q1);

    weight_U : component kernel_cnn_weight_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 102400,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_cnn_fu_164_weight_address0,
        ce0 => grp_cnn_fu_164_weight_ce0,
        we0 => grp_cnn_fu_164_weight_we0,
        d0 => grp_cnn_fu_164_weight_d0,
        q0 => weight_q0,
        address1 => grp_cnn_fu_164_weight_address1,
        ce1 => grp_cnn_fu_164_weight_ce1,
        q1 => weight_q1);

    grp_cnn_fu_164 : component kernel_cnn_cnn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_cnn_fu_164_ap_start,
        ap_done => grp_cnn_fu_164_ap_done,
        ap_idle => grp_cnn_fu_164_ap_idle,
        ap_ready => grp_cnn_fu_164_ap_ready,
        input_0_address0 => grp_cnn_fu_164_input_0_address0,
        input_0_ce0 => grp_cnn_fu_164_input_0_ce0,
        input_0_we0 => grp_cnn_fu_164_input_0_we0,
        input_0_d0 => grp_cnn_fu_164_input_0_d0,
        input_0_q0 => input_q0,
        input_0_address1 => grp_cnn_fu_164_input_0_address1,
        input_0_ce1 => grp_cnn_fu_164_input_0_ce1,
        input_0_q1 => input_q1,
        input_0_address2 => grp_cnn_fu_164_input_0_address2,
        input_0_ce2 => grp_cnn_fu_164_input_0_ce2,
        input_0_q2 => input_q2,
        input_0_address3 => grp_cnn_fu_164_input_0_address3,
        input_0_ce3 => grp_cnn_fu_164_input_0_ce3,
        input_0_q3 => input_q3,
        input_0_address4 => grp_cnn_fu_164_input_0_address4,
        input_0_ce4 => grp_cnn_fu_164_input_0_ce4,
        input_0_q4 => input_q4,
        input_0_address5 => grp_cnn_fu_164_input_0_address5,
        input_0_ce5 => grp_cnn_fu_164_input_0_ce5,
        input_0_q5 => input_q5,
        input_0_address6 => grp_cnn_fu_164_input_0_address6,
        input_0_ce6 => grp_cnn_fu_164_input_0_ce6,
        input_0_q6 => input_q6,
        input_0_address7 => grp_cnn_fu_164_input_0_address7,
        input_0_ce7 => grp_cnn_fu_164_input_0_ce7,
        input_0_q7 => input_q7,
        input_0_address8 => grp_cnn_fu_164_input_0_address8,
        input_0_ce8 => grp_cnn_fu_164_input_0_ce8,
        input_0_q8 => input_q8,
        input_0_address9 => grp_cnn_fu_164_input_0_address9,
        input_0_ce9 => grp_cnn_fu_164_input_0_ce9,
        input_0_q9 => input_q9,
        input_0_address10 => grp_cnn_fu_164_input_0_address10,
        input_0_ce10 => grp_cnn_fu_164_input_0_ce10,
        input_0_q10 => input_q10,
        input_0_address11 => grp_cnn_fu_164_input_0_address11,
        input_0_ce11 => grp_cnn_fu_164_input_0_ce11,
        input_0_q11 => input_q11,
        input_0_address12 => grp_cnn_fu_164_input_0_address12,
        input_0_ce12 => grp_cnn_fu_164_input_0_ce12,
        input_0_q12 => input_q12,
        input_0_address13 => grp_cnn_fu_164_input_0_address13,
        input_0_ce13 => grp_cnn_fu_164_input_0_ce13,
        input_0_q13 => input_q13,
        input_0_address14 => grp_cnn_fu_164_input_0_address14,
        input_0_ce14 => grp_cnn_fu_164_input_0_ce14,
        input_0_q14 => input_q14,
        input_0_address15 => grp_cnn_fu_164_input_0_address15,
        input_0_ce15 => grp_cnn_fu_164_input_0_ce15,
        input_0_q15 => input_q15,
        input_0_address16 => grp_cnn_fu_164_input_0_address16,
        input_0_ce16 => grp_cnn_fu_164_input_0_ce16,
        input_0_q16 => input_q16,
        input_1_address0 => grp_cnn_fu_164_input_1_address0,
        input_1_ce0 => grp_cnn_fu_164_input_1_ce0,
        input_1_we0 => grp_cnn_fu_164_input_1_we0,
        input_1_d0 => grp_cnn_fu_164_input_1_d0,
        input_1_q0 => input_1_q0,
        input_1_address1 => grp_cnn_fu_164_input_1_address1,
        input_1_ce1 => grp_cnn_fu_164_input_1_ce1,
        input_1_q1 => input_1_q1,
        input_1_address2 => grp_cnn_fu_164_input_1_address2,
        input_1_ce2 => grp_cnn_fu_164_input_1_ce2,
        input_1_q2 => input_1_q2,
        input_1_address3 => grp_cnn_fu_164_input_1_address3,
        input_1_ce3 => grp_cnn_fu_164_input_1_ce3,
        input_1_q3 => input_1_q3,
        input_1_address4 => grp_cnn_fu_164_input_1_address4,
        input_1_ce4 => grp_cnn_fu_164_input_1_ce4,
        input_1_q4 => input_1_q4,
        input_1_address5 => grp_cnn_fu_164_input_1_address5,
        input_1_ce5 => grp_cnn_fu_164_input_1_ce5,
        input_1_q5 => input_1_q5,
        input_1_address6 => grp_cnn_fu_164_input_1_address6,
        input_1_ce6 => grp_cnn_fu_164_input_1_ce6,
        input_1_q6 => input_1_q6,
        input_1_address7 => grp_cnn_fu_164_input_1_address7,
        input_1_ce7 => grp_cnn_fu_164_input_1_ce7,
        input_1_q7 => input_1_q7,
        input_1_address8 => grp_cnn_fu_164_input_1_address8,
        input_1_ce8 => grp_cnn_fu_164_input_1_ce8,
        input_1_q8 => input_1_q8,
        input_1_address9 => grp_cnn_fu_164_input_1_address9,
        input_1_ce9 => grp_cnn_fu_164_input_1_ce9,
        input_1_q9 => input_1_q9,
        input_1_address10 => grp_cnn_fu_164_input_1_address10,
        input_1_ce10 => grp_cnn_fu_164_input_1_ce10,
        input_1_q10 => input_1_q10,
        input_1_address11 => grp_cnn_fu_164_input_1_address11,
        input_1_ce11 => grp_cnn_fu_164_input_1_ce11,
        input_1_q11 => input_1_q11,
        input_1_address12 => grp_cnn_fu_164_input_1_address12,
        input_1_ce12 => grp_cnn_fu_164_input_1_ce12,
        input_1_q12 => input_1_q12,
        input_1_address13 => grp_cnn_fu_164_input_1_address13,
        input_1_ce13 => grp_cnn_fu_164_input_1_ce13,
        input_1_q13 => input_1_q13,
        input_1_address14 => grp_cnn_fu_164_input_1_address14,
        input_1_ce14 => grp_cnn_fu_164_input_1_ce14,
        input_1_q14 => input_1_q14,
        input_1_address15 => grp_cnn_fu_164_input_1_address15,
        input_1_ce15 => grp_cnn_fu_164_input_1_ce15,
        input_1_q15 => input_1_q15,
        input_1_address16 => grp_cnn_fu_164_input_1_address16,
        input_1_ce16 => grp_cnn_fu_164_input_1_ce16,
        input_1_q16 => input_1_q16,
        input_2_address0 => grp_cnn_fu_164_input_2_address0,
        input_2_ce0 => grp_cnn_fu_164_input_2_ce0,
        input_2_we0 => grp_cnn_fu_164_input_2_we0,
        input_2_d0 => grp_cnn_fu_164_input_2_d0,
        input_2_q0 => input_2_q0,
        input_2_address1 => grp_cnn_fu_164_input_2_address1,
        input_2_ce1 => grp_cnn_fu_164_input_2_ce1,
        input_2_q1 => input_2_q1,
        input_2_address2 => grp_cnn_fu_164_input_2_address2,
        input_2_ce2 => grp_cnn_fu_164_input_2_ce2,
        input_2_q2 => input_2_q2,
        input_2_address3 => grp_cnn_fu_164_input_2_address3,
        input_2_ce3 => grp_cnn_fu_164_input_2_ce3,
        input_2_q3 => input_2_q3,
        input_2_address4 => grp_cnn_fu_164_input_2_address4,
        input_2_ce4 => grp_cnn_fu_164_input_2_ce4,
        input_2_q4 => input_2_q4,
        input_2_address5 => grp_cnn_fu_164_input_2_address5,
        input_2_ce5 => grp_cnn_fu_164_input_2_ce5,
        input_2_q5 => input_2_q5,
        input_2_address6 => grp_cnn_fu_164_input_2_address6,
        input_2_ce6 => grp_cnn_fu_164_input_2_ce6,
        input_2_q6 => input_2_q6,
        input_2_address7 => grp_cnn_fu_164_input_2_address7,
        input_2_ce7 => grp_cnn_fu_164_input_2_ce7,
        input_2_q7 => input_2_q7,
        input_2_address8 => grp_cnn_fu_164_input_2_address8,
        input_2_ce8 => grp_cnn_fu_164_input_2_ce8,
        input_2_q8 => input_2_q8,
        input_2_address9 => grp_cnn_fu_164_input_2_address9,
        input_2_ce9 => grp_cnn_fu_164_input_2_ce9,
        input_2_q9 => input_2_q9,
        input_2_address10 => grp_cnn_fu_164_input_2_address10,
        input_2_ce10 => grp_cnn_fu_164_input_2_ce10,
        input_2_q10 => input_2_q10,
        input_2_address11 => grp_cnn_fu_164_input_2_address11,
        input_2_ce11 => grp_cnn_fu_164_input_2_ce11,
        input_2_q11 => input_2_q11,
        input_2_address12 => grp_cnn_fu_164_input_2_address12,
        input_2_ce12 => grp_cnn_fu_164_input_2_ce12,
        input_2_q12 => input_2_q12,
        input_2_address13 => grp_cnn_fu_164_input_2_address13,
        input_2_ce13 => grp_cnn_fu_164_input_2_ce13,
        input_2_q13 => input_2_q13,
        input_2_address14 => grp_cnn_fu_164_input_2_address14,
        input_2_ce14 => grp_cnn_fu_164_input_2_ce14,
        input_2_q14 => input_2_q14,
        input_2_address15 => grp_cnn_fu_164_input_2_address15,
        input_2_ce15 => grp_cnn_fu_164_input_2_ce15,
        input_2_q15 => input_2_q15,
        input_2_address16 => grp_cnn_fu_164_input_2_address16,
        input_2_ce16 => grp_cnn_fu_164_input_2_ce16,
        input_2_q16 => input_2_q16,
        input_3_address0 => grp_cnn_fu_164_input_3_address0,
        input_3_ce0 => grp_cnn_fu_164_input_3_ce0,
        input_3_we0 => grp_cnn_fu_164_input_3_we0,
        input_3_d0 => grp_cnn_fu_164_input_3_d0,
        input_3_q0 => input_3_q0,
        input_3_address1 => grp_cnn_fu_164_input_3_address1,
        input_3_ce1 => grp_cnn_fu_164_input_3_ce1,
        input_3_q1 => input_3_q1,
        input_3_address2 => grp_cnn_fu_164_input_3_address2,
        input_3_ce2 => grp_cnn_fu_164_input_3_ce2,
        input_3_q2 => input_3_q2,
        input_3_address3 => grp_cnn_fu_164_input_3_address3,
        input_3_ce3 => grp_cnn_fu_164_input_3_ce3,
        input_3_q3 => input_3_q3,
        input_3_address4 => grp_cnn_fu_164_input_3_address4,
        input_3_ce4 => grp_cnn_fu_164_input_3_ce4,
        input_3_q4 => input_3_q4,
        input_3_address5 => grp_cnn_fu_164_input_3_address5,
        input_3_ce5 => grp_cnn_fu_164_input_3_ce5,
        input_3_q5 => input_3_q5,
        input_3_address6 => grp_cnn_fu_164_input_3_address6,
        input_3_ce6 => grp_cnn_fu_164_input_3_ce6,
        input_3_q6 => input_3_q6,
        input_3_address7 => grp_cnn_fu_164_input_3_address7,
        input_3_ce7 => grp_cnn_fu_164_input_3_ce7,
        input_3_q7 => input_3_q7,
        input_3_address8 => grp_cnn_fu_164_input_3_address8,
        input_3_ce8 => grp_cnn_fu_164_input_3_ce8,
        input_3_q8 => input_3_q8,
        input_3_address9 => grp_cnn_fu_164_input_3_address9,
        input_3_ce9 => grp_cnn_fu_164_input_3_ce9,
        input_3_q9 => input_3_q9,
        input_3_address10 => grp_cnn_fu_164_input_3_address10,
        input_3_ce10 => grp_cnn_fu_164_input_3_ce10,
        input_3_q10 => input_3_q10,
        input_3_address11 => grp_cnn_fu_164_input_3_address11,
        input_3_ce11 => grp_cnn_fu_164_input_3_ce11,
        input_3_q11 => input_3_q11,
        input_3_address12 => grp_cnn_fu_164_input_3_address12,
        input_3_ce12 => grp_cnn_fu_164_input_3_ce12,
        input_3_q12 => input_3_q12,
        input_3_address13 => grp_cnn_fu_164_input_3_address13,
        input_3_ce13 => grp_cnn_fu_164_input_3_ce13,
        input_3_q13 => input_3_q13,
        input_3_address14 => grp_cnn_fu_164_input_3_address14,
        input_3_ce14 => grp_cnn_fu_164_input_3_ce14,
        input_3_q14 => input_3_q14,
        input_3_address15 => grp_cnn_fu_164_input_3_address15,
        input_3_ce15 => grp_cnn_fu_164_input_3_ce15,
        input_3_q15 => input_3_q15,
        input_3_address16 => grp_cnn_fu_164_input_3_address16,
        input_3_ce16 => grp_cnn_fu_164_input_3_ce16,
        input_3_q16 => input_3_q16,
        output_0_address0 => grp_cnn_fu_164_output_0_address0,
        output_0_ce0 => grp_cnn_fu_164_output_0_ce0,
        output_0_we0 => grp_cnn_fu_164_output_0_we0,
        output_0_d0 => grp_cnn_fu_164_output_0_d0,
        output_0_q0 => output_q0,
        output_0_address1 => grp_cnn_fu_164_output_0_address1,
        output_0_ce1 => grp_cnn_fu_164_output_0_ce1,
        output_0_we1 => grp_cnn_fu_164_output_0_we1,
        output_0_d1 => grp_cnn_fu_164_output_0_d1,
        output_0_q1 => output_q1,
        output_1_address0 => grp_cnn_fu_164_output_1_address0,
        output_1_ce0 => grp_cnn_fu_164_output_1_ce0,
        output_1_we0 => grp_cnn_fu_164_output_1_we0,
        output_1_d0 => grp_cnn_fu_164_output_1_d0,
        output_1_q0 => output_1_q0,
        output_1_address1 => grp_cnn_fu_164_output_1_address1,
        output_1_ce1 => grp_cnn_fu_164_output_1_ce1,
        output_1_we1 => grp_cnn_fu_164_output_1_we1,
        output_1_d1 => grp_cnn_fu_164_output_1_d1,
        output_1_q1 => output_1_q1,
        output_2_address0 => grp_cnn_fu_164_output_2_address0,
        output_2_ce0 => grp_cnn_fu_164_output_2_ce0,
        output_2_we0 => grp_cnn_fu_164_output_2_we0,
        output_2_d0 => grp_cnn_fu_164_output_2_d0,
        output_2_q0 => output_2_q0,
        output_2_address1 => grp_cnn_fu_164_output_2_address1,
        output_2_ce1 => grp_cnn_fu_164_output_2_ce1,
        output_2_we1 => grp_cnn_fu_164_output_2_we1,
        output_2_d1 => grp_cnn_fu_164_output_2_d1,
        output_2_q1 => output_2_q1,
        output_3_address0 => grp_cnn_fu_164_output_3_address0,
        output_3_ce0 => grp_cnn_fu_164_output_3_ce0,
        output_3_we0 => grp_cnn_fu_164_output_3_we0,
        output_3_d0 => grp_cnn_fu_164_output_3_d0,
        output_3_q0 => output_3_q0,
        output_3_address1 => grp_cnn_fu_164_output_3_address1,
        output_3_ce1 => grp_cnn_fu_164_output_3_ce1,
        output_3_we1 => grp_cnn_fu_164_output_3_we1,
        output_3_d1 => grp_cnn_fu_164_output_3_d1,
        output_3_q1 => output_3_q1,
        output_4_address0 => grp_cnn_fu_164_output_4_address0,
        output_4_ce0 => grp_cnn_fu_164_output_4_ce0,
        output_4_we0 => grp_cnn_fu_164_output_4_we0,
        output_4_d0 => grp_cnn_fu_164_output_4_d0,
        output_4_q0 => output_4_q0,
        output_4_address1 => grp_cnn_fu_164_output_4_address1,
        output_4_ce1 => grp_cnn_fu_164_output_4_ce1,
        output_4_we1 => grp_cnn_fu_164_output_4_we1,
        output_4_d1 => grp_cnn_fu_164_output_4_d1,
        output_4_q1 => output_4_q1,
        output_5_address0 => grp_cnn_fu_164_output_5_address0,
        output_5_ce0 => grp_cnn_fu_164_output_5_ce0,
        output_5_we0 => grp_cnn_fu_164_output_5_we0,
        output_5_d0 => grp_cnn_fu_164_output_5_d0,
        output_5_q0 => output_5_q0,
        output_5_address1 => grp_cnn_fu_164_output_5_address1,
        output_5_ce1 => grp_cnn_fu_164_output_5_ce1,
        output_5_we1 => grp_cnn_fu_164_output_5_we1,
        output_5_d1 => grp_cnn_fu_164_output_5_d1,
        output_5_q1 => output_5_q1,
        output_6_address0 => grp_cnn_fu_164_output_6_address0,
        output_6_ce0 => grp_cnn_fu_164_output_6_ce0,
        output_6_we0 => grp_cnn_fu_164_output_6_we0,
        output_6_d0 => grp_cnn_fu_164_output_6_d0,
        output_6_q0 => output_6_q0,
        output_6_address1 => grp_cnn_fu_164_output_6_address1,
        output_6_ce1 => grp_cnn_fu_164_output_6_ce1,
        output_6_we1 => grp_cnn_fu_164_output_6_we1,
        output_6_d1 => grp_cnn_fu_164_output_6_d1,
        output_6_q1 => output_6_q1,
        output_7_address0 => grp_cnn_fu_164_output_7_address0,
        output_7_ce0 => grp_cnn_fu_164_output_7_ce0,
        output_7_we0 => grp_cnn_fu_164_output_7_we0,
        output_7_d0 => grp_cnn_fu_164_output_7_d0,
        output_7_q0 => output_7_q0,
        output_7_address1 => grp_cnn_fu_164_output_7_address1,
        output_7_ce1 => grp_cnn_fu_164_output_7_ce1,
        output_7_we1 => grp_cnn_fu_164_output_7_we1,
        output_7_d1 => grp_cnn_fu_164_output_7_d1,
        output_7_q1 => output_7_q1,
        output_8_address0 => grp_cnn_fu_164_output_8_address0,
        output_8_ce0 => grp_cnn_fu_164_output_8_ce0,
        output_8_we0 => grp_cnn_fu_164_output_8_we0,
        output_8_d0 => grp_cnn_fu_164_output_8_d0,
        output_8_q0 => output_8_q0,
        output_8_address1 => grp_cnn_fu_164_output_8_address1,
        output_8_ce1 => grp_cnn_fu_164_output_8_ce1,
        output_8_we1 => grp_cnn_fu_164_output_8_we1,
        output_8_d1 => grp_cnn_fu_164_output_8_d1,
        output_8_q1 => output_8_q1,
        output_9_address0 => grp_cnn_fu_164_output_9_address0,
        output_9_ce0 => grp_cnn_fu_164_output_9_ce0,
        output_9_we0 => grp_cnn_fu_164_output_9_we0,
        output_9_d0 => grp_cnn_fu_164_output_9_d0,
        output_9_q0 => output_9_q0,
        output_9_address1 => grp_cnn_fu_164_output_9_address1,
        output_9_ce1 => grp_cnn_fu_164_output_9_ce1,
        output_9_we1 => grp_cnn_fu_164_output_9_we1,
        output_9_d1 => grp_cnn_fu_164_output_9_d1,
        output_9_q1 => output_9_q1,
        output_10_address0 => grp_cnn_fu_164_output_10_address0,
        output_10_ce0 => grp_cnn_fu_164_output_10_ce0,
        output_10_we0 => grp_cnn_fu_164_output_10_we0,
        output_10_d0 => grp_cnn_fu_164_output_10_d0,
        output_10_q0 => output_10_q0,
        output_10_address1 => grp_cnn_fu_164_output_10_address1,
        output_10_ce1 => grp_cnn_fu_164_output_10_ce1,
        output_10_we1 => grp_cnn_fu_164_output_10_we1,
        output_10_d1 => grp_cnn_fu_164_output_10_d1,
        output_10_q1 => output_10_q1,
        output_11_address0 => grp_cnn_fu_164_output_11_address0,
        output_11_ce0 => grp_cnn_fu_164_output_11_ce0,
        output_11_we0 => grp_cnn_fu_164_output_11_we0,
        output_11_d0 => grp_cnn_fu_164_output_11_d0,
        output_11_q0 => output_11_q0,
        output_11_address1 => grp_cnn_fu_164_output_11_address1,
        output_11_ce1 => grp_cnn_fu_164_output_11_ce1,
        output_11_we1 => grp_cnn_fu_164_output_11_we1,
        output_11_d1 => grp_cnn_fu_164_output_11_d1,
        output_11_q1 => output_11_q1,
        output_12_address0 => grp_cnn_fu_164_output_12_address0,
        output_12_ce0 => grp_cnn_fu_164_output_12_ce0,
        output_12_we0 => grp_cnn_fu_164_output_12_we0,
        output_12_d0 => grp_cnn_fu_164_output_12_d0,
        output_12_q0 => output_12_q0,
        output_12_address1 => grp_cnn_fu_164_output_12_address1,
        output_12_ce1 => grp_cnn_fu_164_output_12_ce1,
        output_12_we1 => grp_cnn_fu_164_output_12_we1,
        output_12_d1 => grp_cnn_fu_164_output_12_d1,
        output_12_q1 => output_12_q1,
        output_13_address0 => grp_cnn_fu_164_output_13_address0,
        output_13_ce0 => grp_cnn_fu_164_output_13_ce0,
        output_13_we0 => grp_cnn_fu_164_output_13_we0,
        output_13_d0 => grp_cnn_fu_164_output_13_d0,
        output_13_q0 => output_13_q0,
        output_13_address1 => grp_cnn_fu_164_output_13_address1,
        output_13_ce1 => grp_cnn_fu_164_output_13_ce1,
        output_13_we1 => grp_cnn_fu_164_output_13_we1,
        output_13_d1 => grp_cnn_fu_164_output_13_d1,
        output_13_q1 => output_13_q1,
        output_14_address0 => grp_cnn_fu_164_output_14_address0,
        output_14_ce0 => grp_cnn_fu_164_output_14_ce0,
        output_14_we0 => grp_cnn_fu_164_output_14_we0,
        output_14_d0 => grp_cnn_fu_164_output_14_d0,
        output_14_q0 => output_14_q0,
        output_14_address1 => grp_cnn_fu_164_output_14_address1,
        output_14_ce1 => grp_cnn_fu_164_output_14_ce1,
        output_14_we1 => grp_cnn_fu_164_output_14_we1,
        output_14_d1 => grp_cnn_fu_164_output_14_d1,
        output_14_q1 => output_14_q1,
        output_15_address0 => grp_cnn_fu_164_output_15_address0,
        output_15_ce0 => grp_cnn_fu_164_output_15_ce0,
        output_15_we0 => grp_cnn_fu_164_output_15_we0,
        output_15_d0 => grp_cnn_fu_164_output_15_d0,
        output_15_q0 => output_15_q0,
        output_15_address1 => grp_cnn_fu_164_output_15_address1,
        output_15_ce1 => grp_cnn_fu_164_output_15_ce1,
        output_15_we1 => grp_cnn_fu_164_output_15_we1,
        output_15_d1 => grp_cnn_fu_164_output_15_d1,
        output_15_q1 => output_15_q1,
        weight_address0 => grp_cnn_fu_164_weight_address0,
        weight_ce0 => grp_cnn_fu_164_weight_ce0,
        weight_we0 => grp_cnn_fu_164_weight_we0,
        weight_d0 => grp_cnn_fu_164_weight_d0,
        weight_q0 => weight_q0,
        weight_address1 => grp_cnn_fu_164_weight_address1,
        weight_ce1 => grp_cnn_fu_164_weight_ce1,
        weight_q1 => weight_q1,
        m_axi_kernel_input_AWVALID => grp_cnn_fu_164_m_axi_kernel_input_AWVALID,
        m_axi_kernel_input_AWREADY => ap_const_logic_0,
        m_axi_kernel_input_AWADDR => grp_cnn_fu_164_m_axi_kernel_input_AWADDR,
        m_axi_kernel_input_AWID => grp_cnn_fu_164_m_axi_kernel_input_AWID,
        m_axi_kernel_input_AWLEN => grp_cnn_fu_164_m_axi_kernel_input_AWLEN,
        m_axi_kernel_input_AWSIZE => grp_cnn_fu_164_m_axi_kernel_input_AWSIZE,
        m_axi_kernel_input_AWBURST => grp_cnn_fu_164_m_axi_kernel_input_AWBURST,
        m_axi_kernel_input_AWLOCK => grp_cnn_fu_164_m_axi_kernel_input_AWLOCK,
        m_axi_kernel_input_AWCACHE => grp_cnn_fu_164_m_axi_kernel_input_AWCACHE,
        m_axi_kernel_input_AWPROT => grp_cnn_fu_164_m_axi_kernel_input_AWPROT,
        m_axi_kernel_input_AWQOS => grp_cnn_fu_164_m_axi_kernel_input_AWQOS,
        m_axi_kernel_input_AWREGION => grp_cnn_fu_164_m_axi_kernel_input_AWREGION,
        m_axi_kernel_input_AWUSER => grp_cnn_fu_164_m_axi_kernel_input_AWUSER,
        m_axi_kernel_input_WVALID => grp_cnn_fu_164_m_axi_kernel_input_WVALID,
        m_axi_kernel_input_WREADY => ap_const_logic_0,
        m_axi_kernel_input_WDATA => grp_cnn_fu_164_m_axi_kernel_input_WDATA,
        m_axi_kernel_input_WSTRB => grp_cnn_fu_164_m_axi_kernel_input_WSTRB,
        m_axi_kernel_input_WLAST => grp_cnn_fu_164_m_axi_kernel_input_WLAST,
        m_axi_kernel_input_WID => grp_cnn_fu_164_m_axi_kernel_input_WID,
        m_axi_kernel_input_WUSER => grp_cnn_fu_164_m_axi_kernel_input_WUSER,
        m_axi_kernel_input_ARVALID => grp_cnn_fu_164_m_axi_kernel_input_ARVALID,
        m_axi_kernel_input_ARREADY => kernel_input_ARREADY,
        m_axi_kernel_input_ARADDR => grp_cnn_fu_164_m_axi_kernel_input_ARADDR,
        m_axi_kernel_input_ARID => grp_cnn_fu_164_m_axi_kernel_input_ARID,
        m_axi_kernel_input_ARLEN => grp_cnn_fu_164_m_axi_kernel_input_ARLEN,
        m_axi_kernel_input_ARSIZE => grp_cnn_fu_164_m_axi_kernel_input_ARSIZE,
        m_axi_kernel_input_ARBURST => grp_cnn_fu_164_m_axi_kernel_input_ARBURST,
        m_axi_kernel_input_ARLOCK => grp_cnn_fu_164_m_axi_kernel_input_ARLOCK,
        m_axi_kernel_input_ARCACHE => grp_cnn_fu_164_m_axi_kernel_input_ARCACHE,
        m_axi_kernel_input_ARPROT => grp_cnn_fu_164_m_axi_kernel_input_ARPROT,
        m_axi_kernel_input_ARQOS => grp_cnn_fu_164_m_axi_kernel_input_ARQOS,
        m_axi_kernel_input_ARREGION => grp_cnn_fu_164_m_axi_kernel_input_ARREGION,
        m_axi_kernel_input_ARUSER => grp_cnn_fu_164_m_axi_kernel_input_ARUSER,
        m_axi_kernel_input_RVALID => kernel_input_RVALID,
        m_axi_kernel_input_RREADY => grp_cnn_fu_164_m_axi_kernel_input_RREADY,
        m_axi_kernel_input_RDATA => kernel_input_RDATA,
        m_axi_kernel_input_RLAST => ap_const_logic_0,
        m_axi_kernel_input_RID => ap_const_lv1_0,
        m_axi_kernel_input_RFIFONUM => kernel_input_RFIFONUM,
        m_axi_kernel_input_RUSER => ap_const_lv1_0,
        m_axi_kernel_input_RRESP => ap_const_lv2_0,
        m_axi_kernel_input_BVALID => ap_const_logic_0,
        m_axi_kernel_input_BREADY => grp_cnn_fu_164_m_axi_kernel_input_BREADY,
        m_axi_kernel_input_BRESP => ap_const_lv2_0,
        m_axi_kernel_input_BID => ap_const_lv1_0,
        m_axi_kernel_input_BUSER => ap_const_lv1_0,
        vinput => vinput_read_reg_232,
        m_axi_kernel_weight_AWVALID => grp_cnn_fu_164_m_axi_kernel_weight_AWVALID,
        m_axi_kernel_weight_AWREADY => ap_const_logic_0,
        m_axi_kernel_weight_AWADDR => grp_cnn_fu_164_m_axi_kernel_weight_AWADDR,
        m_axi_kernel_weight_AWID => grp_cnn_fu_164_m_axi_kernel_weight_AWID,
        m_axi_kernel_weight_AWLEN => grp_cnn_fu_164_m_axi_kernel_weight_AWLEN,
        m_axi_kernel_weight_AWSIZE => grp_cnn_fu_164_m_axi_kernel_weight_AWSIZE,
        m_axi_kernel_weight_AWBURST => grp_cnn_fu_164_m_axi_kernel_weight_AWBURST,
        m_axi_kernel_weight_AWLOCK => grp_cnn_fu_164_m_axi_kernel_weight_AWLOCK,
        m_axi_kernel_weight_AWCACHE => grp_cnn_fu_164_m_axi_kernel_weight_AWCACHE,
        m_axi_kernel_weight_AWPROT => grp_cnn_fu_164_m_axi_kernel_weight_AWPROT,
        m_axi_kernel_weight_AWQOS => grp_cnn_fu_164_m_axi_kernel_weight_AWQOS,
        m_axi_kernel_weight_AWREGION => grp_cnn_fu_164_m_axi_kernel_weight_AWREGION,
        m_axi_kernel_weight_AWUSER => grp_cnn_fu_164_m_axi_kernel_weight_AWUSER,
        m_axi_kernel_weight_WVALID => grp_cnn_fu_164_m_axi_kernel_weight_WVALID,
        m_axi_kernel_weight_WREADY => ap_const_logic_0,
        m_axi_kernel_weight_WDATA => grp_cnn_fu_164_m_axi_kernel_weight_WDATA,
        m_axi_kernel_weight_WSTRB => grp_cnn_fu_164_m_axi_kernel_weight_WSTRB,
        m_axi_kernel_weight_WLAST => grp_cnn_fu_164_m_axi_kernel_weight_WLAST,
        m_axi_kernel_weight_WID => grp_cnn_fu_164_m_axi_kernel_weight_WID,
        m_axi_kernel_weight_WUSER => grp_cnn_fu_164_m_axi_kernel_weight_WUSER,
        m_axi_kernel_weight_ARVALID => grp_cnn_fu_164_m_axi_kernel_weight_ARVALID,
        m_axi_kernel_weight_ARREADY => kernel_weight_ARREADY,
        m_axi_kernel_weight_ARADDR => grp_cnn_fu_164_m_axi_kernel_weight_ARADDR,
        m_axi_kernel_weight_ARID => grp_cnn_fu_164_m_axi_kernel_weight_ARID,
        m_axi_kernel_weight_ARLEN => grp_cnn_fu_164_m_axi_kernel_weight_ARLEN,
        m_axi_kernel_weight_ARSIZE => grp_cnn_fu_164_m_axi_kernel_weight_ARSIZE,
        m_axi_kernel_weight_ARBURST => grp_cnn_fu_164_m_axi_kernel_weight_ARBURST,
        m_axi_kernel_weight_ARLOCK => grp_cnn_fu_164_m_axi_kernel_weight_ARLOCK,
        m_axi_kernel_weight_ARCACHE => grp_cnn_fu_164_m_axi_kernel_weight_ARCACHE,
        m_axi_kernel_weight_ARPROT => grp_cnn_fu_164_m_axi_kernel_weight_ARPROT,
        m_axi_kernel_weight_ARQOS => grp_cnn_fu_164_m_axi_kernel_weight_ARQOS,
        m_axi_kernel_weight_ARREGION => grp_cnn_fu_164_m_axi_kernel_weight_ARREGION,
        m_axi_kernel_weight_ARUSER => grp_cnn_fu_164_m_axi_kernel_weight_ARUSER,
        m_axi_kernel_weight_RVALID => kernel_weight_RVALID,
        m_axi_kernel_weight_RREADY => grp_cnn_fu_164_m_axi_kernel_weight_RREADY,
        m_axi_kernel_weight_RDATA => kernel_weight_RDATA,
        m_axi_kernel_weight_RLAST => ap_const_logic_0,
        m_axi_kernel_weight_RID => ap_const_lv1_0,
        m_axi_kernel_weight_RFIFONUM => kernel_weight_RFIFONUM,
        m_axi_kernel_weight_RUSER => ap_const_lv1_0,
        m_axi_kernel_weight_RRESP => ap_const_lv2_0,
        m_axi_kernel_weight_BVALID => ap_const_logic_0,
        m_axi_kernel_weight_BREADY => grp_cnn_fu_164_m_axi_kernel_weight_BREADY,
        m_axi_kernel_weight_BRESP => ap_const_lv2_0,
        m_axi_kernel_weight_BID => ap_const_lv1_0,
        m_axi_kernel_weight_BUSER => ap_const_lv1_0,
        vweight => vweight_read_reg_227,
        m_axi_kernel_output_AWVALID => grp_cnn_fu_164_m_axi_kernel_output_AWVALID,
        m_axi_kernel_output_AWREADY => kernel_output_AWREADY,
        m_axi_kernel_output_AWADDR => grp_cnn_fu_164_m_axi_kernel_output_AWADDR,
        m_axi_kernel_output_AWID => grp_cnn_fu_164_m_axi_kernel_output_AWID,
        m_axi_kernel_output_AWLEN => grp_cnn_fu_164_m_axi_kernel_output_AWLEN,
        m_axi_kernel_output_AWSIZE => grp_cnn_fu_164_m_axi_kernel_output_AWSIZE,
        m_axi_kernel_output_AWBURST => grp_cnn_fu_164_m_axi_kernel_output_AWBURST,
        m_axi_kernel_output_AWLOCK => grp_cnn_fu_164_m_axi_kernel_output_AWLOCK,
        m_axi_kernel_output_AWCACHE => grp_cnn_fu_164_m_axi_kernel_output_AWCACHE,
        m_axi_kernel_output_AWPROT => grp_cnn_fu_164_m_axi_kernel_output_AWPROT,
        m_axi_kernel_output_AWQOS => grp_cnn_fu_164_m_axi_kernel_output_AWQOS,
        m_axi_kernel_output_AWREGION => grp_cnn_fu_164_m_axi_kernel_output_AWREGION,
        m_axi_kernel_output_AWUSER => grp_cnn_fu_164_m_axi_kernel_output_AWUSER,
        m_axi_kernel_output_WVALID => grp_cnn_fu_164_m_axi_kernel_output_WVALID,
        m_axi_kernel_output_WREADY => kernel_output_WREADY,
        m_axi_kernel_output_WDATA => grp_cnn_fu_164_m_axi_kernel_output_WDATA,
        m_axi_kernel_output_WSTRB => grp_cnn_fu_164_m_axi_kernel_output_WSTRB,
        m_axi_kernel_output_WLAST => grp_cnn_fu_164_m_axi_kernel_output_WLAST,
        m_axi_kernel_output_WID => grp_cnn_fu_164_m_axi_kernel_output_WID,
        m_axi_kernel_output_WUSER => grp_cnn_fu_164_m_axi_kernel_output_WUSER,
        m_axi_kernel_output_ARVALID => grp_cnn_fu_164_m_axi_kernel_output_ARVALID,
        m_axi_kernel_output_ARREADY => kernel_output_ARREADY,
        m_axi_kernel_output_ARADDR => grp_cnn_fu_164_m_axi_kernel_output_ARADDR,
        m_axi_kernel_output_ARID => grp_cnn_fu_164_m_axi_kernel_output_ARID,
        m_axi_kernel_output_ARLEN => grp_cnn_fu_164_m_axi_kernel_output_ARLEN,
        m_axi_kernel_output_ARSIZE => grp_cnn_fu_164_m_axi_kernel_output_ARSIZE,
        m_axi_kernel_output_ARBURST => grp_cnn_fu_164_m_axi_kernel_output_ARBURST,
        m_axi_kernel_output_ARLOCK => grp_cnn_fu_164_m_axi_kernel_output_ARLOCK,
        m_axi_kernel_output_ARCACHE => grp_cnn_fu_164_m_axi_kernel_output_ARCACHE,
        m_axi_kernel_output_ARPROT => grp_cnn_fu_164_m_axi_kernel_output_ARPROT,
        m_axi_kernel_output_ARQOS => grp_cnn_fu_164_m_axi_kernel_output_ARQOS,
        m_axi_kernel_output_ARREGION => grp_cnn_fu_164_m_axi_kernel_output_ARREGION,
        m_axi_kernel_output_ARUSER => grp_cnn_fu_164_m_axi_kernel_output_ARUSER,
        m_axi_kernel_output_RVALID => kernel_output_RVALID,
        m_axi_kernel_output_RREADY => grp_cnn_fu_164_m_axi_kernel_output_RREADY,
        m_axi_kernel_output_RDATA => kernel_output_RDATA,
        m_axi_kernel_output_RLAST => ap_const_logic_0,
        m_axi_kernel_output_RID => ap_const_lv1_0,
        m_axi_kernel_output_RFIFONUM => kernel_output_RFIFONUM,
        m_axi_kernel_output_RUSER => ap_const_lv1_0,
        m_axi_kernel_output_RRESP => ap_const_lv2_0,
        m_axi_kernel_output_BVALID => kernel_output_BVALID,
        m_axi_kernel_output_BREADY => grp_cnn_fu_164_m_axi_kernel_output_BREADY,
        m_axi_kernel_output_BRESP => ap_const_lv2_0,
        m_axi_kernel_output_BID => ap_const_lv1_0,
        m_axi_kernel_output_BUSER => ap_const_lv1_0,
        voutput => voutput_read_reg_222);

    control_s_axi_U : component kernel_cnn_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        vinput => vinput,
        vweight => vweight,
        voutput => voutput,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    kernel_input_m_axi_U : component kernel_cnn_kernel_input_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 70,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_KERNEL_INPUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_KERNEL_INPUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_KERNEL_INPUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_KERNEL_INPUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_KERNEL_INPUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_KERNEL_INPUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_KERNEL_INPUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_KERNEL_INPUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_KERNEL_INPUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_KERNEL_INPUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_KERNEL_INPUT_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 128,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_kernel_input_AWVALID,
        AWREADY => m_axi_kernel_input_AWREADY,
        AWADDR => m_axi_kernel_input_AWADDR,
        AWID => m_axi_kernel_input_AWID,
        AWLEN => m_axi_kernel_input_AWLEN,
        AWSIZE => m_axi_kernel_input_AWSIZE,
        AWBURST => m_axi_kernel_input_AWBURST,
        AWLOCK => m_axi_kernel_input_AWLOCK,
        AWCACHE => m_axi_kernel_input_AWCACHE,
        AWPROT => m_axi_kernel_input_AWPROT,
        AWQOS => m_axi_kernel_input_AWQOS,
        AWREGION => m_axi_kernel_input_AWREGION,
        AWUSER => m_axi_kernel_input_AWUSER,
        WVALID => m_axi_kernel_input_WVALID,
        WREADY => m_axi_kernel_input_WREADY,
        WDATA => m_axi_kernel_input_WDATA,
        WSTRB => m_axi_kernel_input_WSTRB,
        WLAST => m_axi_kernel_input_WLAST,
        WID => m_axi_kernel_input_WID,
        WUSER => m_axi_kernel_input_WUSER,
        ARVALID => m_axi_kernel_input_ARVALID,
        ARREADY => m_axi_kernel_input_ARREADY,
        ARADDR => m_axi_kernel_input_ARADDR,
        ARID => m_axi_kernel_input_ARID,
        ARLEN => m_axi_kernel_input_ARLEN,
        ARSIZE => m_axi_kernel_input_ARSIZE,
        ARBURST => m_axi_kernel_input_ARBURST,
        ARLOCK => m_axi_kernel_input_ARLOCK,
        ARCACHE => m_axi_kernel_input_ARCACHE,
        ARPROT => m_axi_kernel_input_ARPROT,
        ARQOS => m_axi_kernel_input_ARQOS,
        ARREGION => m_axi_kernel_input_ARREGION,
        ARUSER => m_axi_kernel_input_ARUSER,
        RVALID => m_axi_kernel_input_RVALID,
        RREADY => m_axi_kernel_input_RREADY,
        RDATA => m_axi_kernel_input_RDATA,
        RLAST => m_axi_kernel_input_RLAST,
        RID => m_axi_kernel_input_RID,
        RUSER => m_axi_kernel_input_RUSER,
        RRESP => m_axi_kernel_input_RRESP,
        BVALID => m_axi_kernel_input_BVALID,
        BREADY => m_axi_kernel_input_BREADY,
        BRESP => m_axi_kernel_input_BRESP,
        BID => m_axi_kernel_input_BID,
        BUSER => m_axi_kernel_input_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => kernel_input_ARVALID,
        I_ARREADY => kernel_input_ARREADY,
        I_ARADDR => grp_cnn_fu_164_m_axi_kernel_input_ARADDR,
        I_ARLEN => grp_cnn_fu_164_m_axi_kernel_input_ARLEN,
        I_RVALID => kernel_input_RVALID,
        I_RREADY => kernel_input_RREADY,
        I_RDATA => kernel_input_RDATA,
        I_RFIFONUM => kernel_input_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => kernel_input_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => kernel_input_WREADY,
        I_WDATA => ap_const_lv128_lc_1,
        I_WSTRB => ap_const_lv16_0,
        I_BVALID => kernel_input_BVALID,
        I_BREADY => ap_const_logic_0);

    kernel_output_m_axi_U : component kernel_cnn_kernel_output_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 70,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_KERNEL_OUTPUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_KERNEL_OUTPUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_KERNEL_OUTPUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_KERNEL_OUTPUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_KERNEL_OUTPUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_KERNEL_OUTPUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_KERNEL_OUTPUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_KERNEL_OUTPUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_KERNEL_OUTPUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_KERNEL_OUTPUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_KERNEL_OUTPUT_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 512,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_kernel_output_AWVALID,
        AWREADY => m_axi_kernel_output_AWREADY,
        AWADDR => m_axi_kernel_output_AWADDR,
        AWID => m_axi_kernel_output_AWID,
        AWLEN => m_axi_kernel_output_AWLEN,
        AWSIZE => m_axi_kernel_output_AWSIZE,
        AWBURST => m_axi_kernel_output_AWBURST,
        AWLOCK => m_axi_kernel_output_AWLOCK,
        AWCACHE => m_axi_kernel_output_AWCACHE,
        AWPROT => m_axi_kernel_output_AWPROT,
        AWQOS => m_axi_kernel_output_AWQOS,
        AWREGION => m_axi_kernel_output_AWREGION,
        AWUSER => m_axi_kernel_output_AWUSER,
        WVALID => m_axi_kernel_output_WVALID,
        WREADY => m_axi_kernel_output_WREADY,
        WDATA => m_axi_kernel_output_WDATA,
        WSTRB => m_axi_kernel_output_WSTRB,
        WLAST => m_axi_kernel_output_WLAST,
        WID => m_axi_kernel_output_WID,
        WUSER => m_axi_kernel_output_WUSER,
        ARVALID => m_axi_kernel_output_ARVALID,
        ARREADY => m_axi_kernel_output_ARREADY,
        ARADDR => m_axi_kernel_output_ARADDR,
        ARID => m_axi_kernel_output_ARID,
        ARLEN => m_axi_kernel_output_ARLEN,
        ARSIZE => m_axi_kernel_output_ARSIZE,
        ARBURST => m_axi_kernel_output_ARBURST,
        ARLOCK => m_axi_kernel_output_ARLOCK,
        ARCACHE => m_axi_kernel_output_ARCACHE,
        ARPROT => m_axi_kernel_output_ARPROT,
        ARQOS => m_axi_kernel_output_ARQOS,
        ARREGION => m_axi_kernel_output_ARREGION,
        ARUSER => m_axi_kernel_output_ARUSER,
        RVALID => m_axi_kernel_output_RVALID,
        RREADY => m_axi_kernel_output_RREADY,
        RDATA => m_axi_kernel_output_RDATA,
        RLAST => m_axi_kernel_output_RLAST,
        RID => m_axi_kernel_output_RID,
        RUSER => m_axi_kernel_output_RUSER,
        RRESP => m_axi_kernel_output_RRESP,
        BVALID => m_axi_kernel_output_BVALID,
        BREADY => m_axi_kernel_output_BREADY,
        BRESP => m_axi_kernel_output_BRESP,
        BID => m_axi_kernel_output_BID,
        BUSER => m_axi_kernel_output_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => kernel_output_ARVALID,
        I_ARREADY => kernel_output_ARREADY,
        I_ARADDR => grp_cnn_fu_164_m_axi_kernel_output_ARADDR,
        I_ARLEN => grp_cnn_fu_164_m_axi_kernel_output_ARLEN,
        I_RVALID => kernel_output_RVALID,
        I_RREADY => kernel_output_RREADY,
        I_RDATA => kernel_output_RDATA,
        I_RFIFONUM => kernel_output_RFIFONUM,
        I_AWVALID => kernel_output_AWVALID,
        I_AWREADY => kernel_output_AWREADY,
        I_AWADDR => grp_cnn_fu_164_m_axi_kernel_output_AWADDR,
        I_AWLEN => grp_cnn_fu_164_m_axi_kernel_output_AWLEN,
        I_WVALID => kernel_output_WVALID,
        I_WREADY => kernel_output_WREADY,
        I_WDATA => grp_cnn_fu_164_m_axi_kernel_output_WDATA,
        I_WSTRB => grp_cnn_fu_164_m_axi_kernel_output_WSTRB,
        I_BVALID => kernel_output_BVALID,
        I_BREADY => kernel_output_BREADY);

    kernel_weight_m_axi_U : component kernel_cnn_kernel_weight_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 70,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_KERNEL_WEIGHT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_KERNEL_WEIGHT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_KERNEL_WEIGHT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_KERNEL_WEIGHT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_KERNEL_WEIGHT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_KERNEL_WEIGHT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_KERNEL_WEIGHT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_KERNEL_WEIGHT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_KERNEL_WEIGHT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_KERNEL_WEIGHT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_KERNEL_WEIGHT_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_kernel_weight_AWVALID,
        AWREADY => m_axi_kernel_weight_AWREADY,
        AWADDR => m_axi_kernel_weight_AWADDR,
        AWID => m_axi_kernel_weight_AWID,
        AWLEN => m_axi_kernel_weight_AWLEN,
        AWSIZE => m_axi_kernel_weight_AWSIZE,
        AWBURST => m_axi_kernel_weight_AWBURST,
        AWLOCK => m_axi_kernel_weight_AWLOCK,
        AWCACHE => m_axi_kernel_weight_AWCACHE,
        AWPROT => m_axi_kernel_weight_AWPROT,
        AWQOS => m_axi_kernel_weight_AWQOS,
        AWREGION => m_axi_kernel_weight_AWREGION,
        AWUSER => m_axi_kernel_weight_AWUSER,
        WVALID => m_axi_kernel_weight_WVALID,
        WREADY => m_axi_kernel_weight_WREADY,
        WDATA => m_axi_kernel_weight_WDATA,
        WSTRB => m_axi_kernel_weight_WSTRB,
        WLAST => m_axi_kernel_weight_WLAST,
        WID => m_axi_kernel_weight_WID,
        WUSER => m_axi_kernel_weight_WUSER,
        ARVALID => m_axi_kernel_weight_ARVALID,
        ARREADY => m_axi_kernel_weight_ARREADY,
        ARADDR => m_axi_kernel_weight_ARADDR,
        ARID => m_axi_kernel_weight_ARID,
        ARLEN => m_axi_kernel_weight_ARLEN,
        ARSIZE => m_axi_kernel_weight_ARSIZE,
        ARBURST => m_axi_kernel_weight_ARBURST,
        ARLOCK => m_axi_kernel_weight_ARLOCK,
        ARCACHE => m_axi_kernel_weight_ARCACHE,
        ARPROT => m_axi_kernel_weight_ARPROT,
        ARQOS => m_axi_kernel_weight_ARQOS,
        ARREGION => m_axi_kernel_weight_ARREGION,
        ARUSER => m_axi_kernel_weight_ARUSER,
        RVALID => m_axi_kernel_weight_RVALID,
        RREADY => m_axi_kernel_weight_RREADY,
        RDATA => m_axi_kernel_weight_RDATA,
        RLAST => m_axi_kernel_weight_RLAST,
        RID => m_axi_kernel_weight_RID,
        RUSER => m_axi_kernel_weight_RUSER,
        RRESP => m_axi_kernel_weight_RRESP,
        BVALID => m_axi_kernel_weight_BVALID,
        BREADY => m_axi_kernel_weight_BREADY,
        BRESP => m_axi_kernel_weight_BRESP,
        BID => m_axi_kernel_weight_BID,
        BUSER => m_axi_kernel_weight_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => kernel_weight_ARVALID,
        I_ARREADY => kernel_weight_ARREADY,
        I_ARADDR => grp_cnn_fu_164_m_axi_kernel_weight_ARADDR,
        I_ARLEN => grp_cnn_fu_164_m_axi_kernel_weight_ARLEN,
        I_RVALID => kernel_weight_RVALID,
        I_RREADY => kernel_weight_RREADY,
        I_RDATA => kernel_weight_RDATA,
        I_RFIFONUM => kernel_weight_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => kernel_weight_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => kernel_weight_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => kernel_weight_BVALID,
        I_BREADY => ap_const_logic_0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_cnn_fu_164_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_cnn_fu_164_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_cnn_fu_164_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_ignore_call39))) then 
                    grp_cnn_fu_164_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cnn_fu_164_ap_ready = ap_const_logic_1)) then 
                    grp_cnn_fu_164_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                vinput_read_reg_232 <= vinput;
                voutput_read_reg_222 <= voutput;
                vweight_read_reg_227 <= vweight;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, grp_cnn_fu_164_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_cnn_fu_164_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_cnn_fu_164_ap_done)
    begin
        if ((grp_cnn_fu_164_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state1_ignore_call39_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call39 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_cnn_fu_164_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_cnn_fu_164_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_cnn_fu_164_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_cnn_fu_164_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_cnn_fu_164_ap_start <= grp_cnn_fu_164_ap_start_reg;

    kernel_input_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_cnn_fu_164_m_axi_kernel_input_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            kernel_input_ARVALID <= grp_cnn_fu_164_m_axi_kernel_input_ARVALID;
        else 
            kernel_input_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    kernel_input_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_cnn_fu_164_m_axi_kernel_input_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            kernel_input_RREADY <= grp_cnn_fu_164_m_axi_kernel_input_RREADY;
        else 
            kernel_input_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    kernel_output_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_cnn_fu_164_m_axi_kernel_output_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            kernel_output_ARVALID <= grp_cnn_fu_164_m_axi_kernel_output_ARVALID;
        else 
            kernel_output_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    kernel_output_AWVALID_assign_proc : process(ap_CS_fsm_state1, grp_cnn_fu_164_m_axi_kernel_output_AWVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            kernel_output_AWVALID <= grp_cnn_fu_164_m_axi_kernel_output_AWVALID;
        else 
            kernel_output_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    kernel_output_BREADY_assign_proc : process(ap_CS_fsm_state1, grp_cnn_fu_164_m_axi_kernel_output_BREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            kernel_output_BREADY <= grp_cnn_fu_164_m_axi_kernel_output_BREADY;
        else 
            kernel_output_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    kernel_output_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_cnn_fu_164_m_axi_kernel_output_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            kernel_output_RREADY <= grp_cnn_fu_164_m_axi_kernel_output_RREADY;
        else 
            kernel_output_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    kernel_output_WVALID_assign_proc : process(ap_CS_fsm_state1, grp_cnn_fu_164_m_axi_kernel_output_WVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            kernel_output_WVALID <= grp_cnn_fu_164_m_axi_kernel_output_WVALID;
        else 
            kernel_output_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    kernel_weight_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_cnn_fu_164_m_axi_kernel_weight_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            kernel_weight_ARVALID <= grp_cnn_fu_164_m_axi_kernel_weight_ARVALID;
        else 
            kernel_weight_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    kernel_weight_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_cnn_fu_164_m_axi_kernel_weight_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            kernel_weight_RREADY <= grp_cnn_fu_164_m_axi_kernel_weight_RREADY;
        else 
            kernel_weight_RREADY <= ap_const_logic_0;
        end if; 
    end process;

end behav;
