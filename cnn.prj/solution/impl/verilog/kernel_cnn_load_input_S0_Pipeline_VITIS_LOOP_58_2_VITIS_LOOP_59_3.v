// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_cnn_load_input_S0_Pipeline_VITIS_LOOP_58_2_VITIS_LOOP_59_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_kernel_input_AWVALID,
        m_axi_kernel_input_AWREADY,
        m_axi_kernel_input_AWADDR,
        m_axi_kernel_input_AWID,
        m_axi_kernel_input_AWLEN,
        m_axi_kernel_input_AWSIZE,
        m_axi_kernel_input_AWBURST,
        m_axi_kernel_input_AWLOCK,
        m_axi_kernel_input_AWCACHE,
        m_axi_kernel_input_AWPROT,
        m_axi_kernel_input_AWQOS,
        m_axi_kernel_input_AWREGION,
        m_axi_kernel_input_AWUSER,
        m_axi_kernel_input_WVALID,
        m_axi_kernel_input_WREADY,
        m_axi_kernel_input_WDATA,
        m_axi_kernel_input_WSTRB,
        m_axi_kernel_input_WLAST,
        m_axi_kernel_input_WID,
        m_axi_kernel_input_WUSER,
        m_axi_kernel_input_ARVALID,
        m_axi_kernel_input_ARREADY,
        m_axi_kernel_input_ARADDR,
        m_axi_kernel_input_ARID,
        m_axi_kernel_input_ARLEN,
        m_axi_kernel_input_ARSIZE,
        m_axi_kernel_input_ARBURST,
        m_axi_kernel_input_ARLOCK,
        m_axi_kernel_input_ARCACHE,
        m_axi_kernel_input_ARPROT,
        m_axi_kernel_input_ARQOS,
        m_axi_kernel_input_ARREGION,
        m_axi_kernel_input_ARUSER,
        m_axi_kernel_input_RVALID,
        m_axi_kernel_input_RREADY,
        m_axi_kernel_input_RDATA,
        m_axi_kernel_input_RLAST,
        m_axi_kernel_input_RID,
        m_axi_kernel_input_RFIFONUM,
        m_axi_kernel_input_RUSER,
        m_axi_kernel_input_RRESP,
        m_axi_kernel_input_BVALID,
        m_axi_kernel_input_BREADY,
        m_axi_kernel_input_BRESP,
        m_axi_kernel_input_BID,
        m_axi_kernel_input_BUSER,
        sext_ln58,
        input_0_address0,
        input_0_ce0,
        input_0_we0,
        input_0_d0,
        input_1_address0,
        input_1_ce0,
        input_1_we0,
        input_1_d0,
        input_2_address0,
        input_2_ce0,
        input_2_we0,
        input_2_d0,
        input_3_address0,
        input_3_ce0,
        input_3_we0,
        input_3_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_kernel_input_AWVALID;
input   m_axi_kernel_input_AWREADY;
output  [63:0] m_axi_kernel_input_AWADDR;
output  [0:0] m_axi_kernel_input_AWID;
output  [31:0] m_axi_kernel_input_AWLEN;
output  [2:0] m_axi_kernel_input_AWSIZE;
output  [1:0] m_axi_kernel_input_AWBURST;
output  [1:0] m_axi_kernel_input_AWLOCK;
output  [3:0] m_axi_kernel_input_AWCACHE;
output  [2:0] m_axi_kernel_input_AWPROT;
output  [3:0] m_axi_kernel_input_AWQOS;
output  [3:0] m_axi_kernel_input_AWREGION;
output  [0:0] m_axi_kernel_input_AWUSER;
output   m_axi_kernel_input_WVALID;
input   m_axi_kernel_input_WREADY;
output  [127:0] m_axi_kernel_input_WDATA;
output  [15:0] m_axi_kernel_input_WSTRB;
output   m_axi_kernel_input_WLAST;
output  [0:0] m_axi_kernel_input_WID;
output  [0:0] m_axi_kernel_input_WUSER;
output   m_axi_kernel_input_ARVALID;
input   m_axi_kernel_input_ARREADY;
output  [63:0] m_axi_kernel_input_ARADDR;
output  [0:0] m_axi_kernel_input_ARID;
output  [31:0] m_axi_kernel_input_ARLEN;
output  [2:0] m_axi_kernel_input_ARSIZE;
output  [1:0] m_axi_kernel_input_ARBURST;
output  [1:0] m_axi_kernel_input_ARLOCK;
output  [3:0] m_axi_kernel_input_ARCACHE;
output  [2:0] m_axi_kernel_input_ARPROT;
output  [3:0] m_axi_kernel_input_ARQOS;
output  [3:0] m_axi_kernel_input_ARREGION;
output  [0:0] m_axi_kernel_input_ARUSER;
input   m_axi_kernel_input_RVALID;
output   m_axi_kernel_input_RREADY;
input  [127:0] m_axi_kernel_input_RDATA;
input   m_axi_kernel_input_RLAST;
input  [0:0] m_axi_kernel_input_RID;
input  [8:0] m_axi_kernel_input_RFIFONUM;
input  [0:0] m_axi_kernel_input_RUSER;
input  [1:0] m_axi_kernel_input_RRESP;
input   m_axi_kernel_input_BVALID;
output   m_axi_kernel_input_BREADY;
input  [1:0] m_axi_kernel_input_BRESP;
input  [0:0] m_axi_kernel_input_BID;
input  [0:0] m_axi_kernel_input_BUSER;
input  [59:0] sext_ln58;
output  [13:0] input_0_address0;
output   input_0_ce0;
output   input_0_we0;
output  [31:0] input_0_d0;
output  [13:0] input_1_address0;
output   input_1_ce0;
output   input_1_we0;
output  [31:0] input_1_d0;
output  [13:0] input_2_address0;
output   input_2_ce0;
output   input_2_we0;
output  [31:0] input_2_d0;
output  [13:0] input_3_address0;
output   input_3_ce0;
output   input_3_we0;
output  [31:0] input_3_d0;

reg ap_idle;
reg m_axi_kernel_input_RREADY;
reg input_0_ce0;
reg input_0_we0;
reg input_1_ce0;
reg input_1_we0;
reg input_2_ce0;
reg input_2_we0;
reg input_3_ce0;
reg input_3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln58_fu_192_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kernel_input_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln59_fu_216_p2;
reg   [0:0] icmp_ln59_reg_407;
reg   [0:0] icmp_ln59_reg_407_pp0_iter1_reg;
wire   [31:0] trunc_ln71_fu_293_p1;
reg   [31:0] trunc_ln71_reg_422;
reg   [31:0] trunc_ln71_1_reg_427;
reg   [31:0] trunc_ln71_2_reg_432;
reg   [31:0] trunc_ln71_3_reg_437;
wire   [63:0] zext_ln77_2_fu_338_p1;
reg   [7:0] i2_fu_86;
wire   [7:0] add_ln59_fu_327_p2;
wire    ap_loop_init;
reg   [5:0] indvar_fu_90;
wire   [5:0] select_ln59_fu_240_p3;
reg   [5:0] ap_sig_allocacmp_indvar_load;
reg   [7:0] i1_fu_94;
wire   [7:0] select_ln58_1_fu_222_p3;
reg   [7:0] ap_sig_allocacmp_i1_load;
reg   [13:0] indvar_flatten_fu_98;
wire   [13:0] add_ln58_fu_198_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [7:0] add_ln58_1_fu_210_p2;
wire   [5:0] add_ln59_1_fu_234_p2;
wire   [7:0] select_ln58_fu_272_p3;
wire   [5:0] lshr_ln_fu_279_p4;
wire   [13:0] grp_fu_361_p3;
wire   [7:0] grp_fu_361_p0;
wire   [5:0] grp_fu_361_p1;
wire   [5:0] grp_fu_361_p2;
reg    grp_fu_361_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [13:0] grp_fu_361_p00;
wire   [13:0] grp_fu_361_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 i2_fu_86 = 8'd0;
#0 indvar_fu_90 = 6'd0;
#0 i1_fu_94 = 8'd0;
#0 indvar_flatten_fu_98 = 14'd0;
#0 ap_done_reg = 1'b0;
end

kernel_cnn_mac_muladd_8ns_6ns_6ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 14 ))
mac_muladd_8ns_6ns_6ns_14_4_1_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_361_p0),
    .din1(grp_fu_361_p1),
    .din2(grp_fu_361_p2),
    .ce(grp_fu_361_ce),
    .dout(grp_fu_361_p3)
);

kernel_cnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln58_fu_192_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i1_fu_94 <= select_ln58_1_fu_222_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i1_fu_94 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i2_fu_86 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            i2_fu_86 <= add_ln59_fu_327_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln58_fu_192_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_98 <= add_ln58_fu_198_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_98 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln58_fu_192_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_fu_90 <= select_ln59_fu_240_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_fu_90 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln59_reg_407 <= icmp_ln59_fu_216_p2;
        icmp_ln59_reg_407_pp0_iter1_reg <= icmp_ln59_reg_407;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        trunc_ln71_1_reg_427 <= {{m_axi_kernel_input_RDATA[63:32]}};
        trunc_ln71_2_reg_432 <= {{m_axi_kernel_input_RDATA[95:64]}};
        trunc_ln71_3_reg_437 <= {{m_axi_kernel_input_RDATA[127:96]}};
        trunc_ln71_reg_422 <= trunc_ln71_fu_293_p1;
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_192_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i1_load = 8'd0;
    end else begin
        ap_sig_allocacmp_i1_load = i1_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_load = indvar_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_361_ce = 1'b1;
    end else begin
        grp_fu_361_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_0_we0 = 1'b1;
    end else begin
        input_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_1_we0 = 1'b1;
    end else begin
        input_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_2_we0 = 1'b1;
    end else begin
        input_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_3_ce0 = 1'b1;
    end else begin
        input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_3_we0 = 1'b1;
    end else begin
        input_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        kernel_input_blk_n_R = m_axi_kernel_input_RVALID;
    end else begin
        kernel_input_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_kernel_input_RREADY = 1'b1;
    end else begin
        m_axi_kernel_input_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln58_1_fu_210_p2 = (ap_sig_allocacmp_i1_load + 8'd1);

assign add_ln58_fu_198_p2 = (ap_sig_allocacmp_indvar_flatten_load + 14'd1);

assign add_ln59_1_fu_234_p2 = (ap_sig_allocacmp_indvar_load + 6'd1);

assign add_ln59_fu_327_p2 = (select_ln58_fu_272_p3 + 8'd4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (m_axi_kernel_input_RVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_361_p0 = grp_fu_361_p00;

assign grp_fu_361_p00 = select_ln58_1_fu_222_p3;

assign grp_fu_361_p1 = 14'd57;

assign grp_fu_361_p2 = grp_fu_361_p20;

assign grp_fu_361_p20 = lshr_ln_fu_279_p4;

assign icmp_ln58_fu_192_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 14'd12996) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_216_p2 = ((ap_sig_allocacmp_indvar_load == 6'd57) ? 1'b1 : 1'b0);

assign input_0_address0 = zext_ln77_2_fu_338_p1;

assign input_0_d0 = trunc_ln71_reg_422;

assign input_1_address0 = zext_ln77_2_fu_338_p1;

assign input_1_d0 = trunc_ln71_1_reg_427;

assign input_2_address0 = zext_ln77_2_fu_338_p1;

assign input_2_d0 = trunc_ln71_2_reg_432;

assign input_3_address0 = zext_ln77_2_fu_338_p1;

assign input_3_d0 = trunc_ln71_3_reg_437;

assign lshr_ln_fu_279_p4 = {{select_ln58_fu_272_p3[7:2]}};

assign m_axi_kernel_input_ARADDR = 64'd0;

assign m_axi_kernel_input_ARBURST = 2'd0;

assign m_axi_kernel_input_ARCACHE = 4'd0;

assign m_axi_kernel_input_ARID = 1'd0;

assign m_axi_kernel_input_ARLEN = 32'd0;

assign m_axi_kernel_input_ARLOCK = 2'd0;

assign m_axi_kernel_input_ARPROT = 3'd0;

assign m_axi_kernel_input_ARQOS = 4'd0;

assign m_axi_kernel_input_ARREGION = 4'd0;

assign m_axi_kernel_input_ARSIZE = 3'd0;

assign m_axi_kernel_input_ARUSER = 1'd0;

assign m_axi_kernel_input_ARVALID = 1'b0;

assign m_axi_kernel_input_AWADDR = 64'd0;

assign m_axi_kernel_input_AWBURST = 2'd0;

assign m_axi_kernel_input_AWCACHE = 4'd0;

assign m_axi_kernel_input_AWID = 1'd0;

assign m_axi_kernel_input_AWLEN = 32'd0;

assign m_axi_kernel_input_AWLOCK = 2'd0;

assign m_axi_kernel_input_AWPROT = 3'd0;

assign m_axi_kernel_input_AWQOS = 4'd0;

assign m_axi_kernel_input_AWREGION = 4'd0;

assign m_axi_kernel_input_AWSIZE = 3'd0;

assign m_axi_kernel_input_AWUSER = 1'd0;

assign m_axi_kernel_input_AWVALID = 1'b0;

assign m_axi_kernel_input_BREADY = 1'b0;

assign m_axi_kernel_input_WDATA = 128'd0;

assign m_axi_kernel_input_WID = 1'd0;

assign m_axi_kernel_input_WLAST = 1'b0;

assign m_axi_kernel_input_WSTRB = 16'd0;

assign m_axi_kernel_input_WUSER = 1'd0;

assign m_axi_kernel_input_WVALID = 1'b0;

assign select_ln58_1_fu_222_p3 = ((icmp_ln59_fu_216_p2[0:0] == 1'b1) ? add_ln58_1_fu_210_p2 : ap_sig_allocacmp_i1_load);

assign select_ln58_fu_272_p3 = ((icmp_ln59_reg_407_pp0_iter1_reg[0:0] == 1'b1) ? 8'd0 : i2_fu_86);

assign select_ln59_fu_240_p3 = ((icmp_ln59_fu_216_p2[0:0] == 1'b1) ? 6'd1 : add_ln59_1_fu_234_p2);

assign trunc_ln71_fu_293_p1 = m_axi_kernel_input_RDATA[31:0];

assign zext_ln77_2_fu_338_p1 = grp_fu_361_p3;

endmodule //kernel_cnn_load_input_S0_Pipeline_VITIS_LOOP_58_2_VITIS_LOOP_59_3
