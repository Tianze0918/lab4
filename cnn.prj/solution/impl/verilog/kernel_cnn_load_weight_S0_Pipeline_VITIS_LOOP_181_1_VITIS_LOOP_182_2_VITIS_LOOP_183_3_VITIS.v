// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_cnn_load_weight_S0_Pipeline_VITIS_LOOP_181_1_VITIS_LOOP_182_2_VITIS_LOOP_183_3_VITIS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_kernel_weight_AWVALID,
        m_axi_kernel_weight_AWREADY,
        m_axi_kernel_weight_AWADDR,
        m_axi_kernel_weight_AWID,
        m_axi_kernel_weight_AWLEN,
        m_axi_kernel_weight_AWSIZE,
        m_axi_kernel_weight_AWBURST,
        m_axi_kernel_weight_AWLOCK,
        m_axi_kernel_weight_AWCACHE,
        m_axi_kernel_weight_AWPROT,
        m_axi_kernel_weight_AWQOS,
        m_axi_kernel_weight_AWREGION,
        m_axi_kernel_weight_AWUSER,
        m_axi_kernel_weight_WVALID,
        m_axi_kernel_weight_WREADY,
        m_axi_kernel_weight_WDATA,
        m_axi_kernel_weight_WSTRB,
        m_axi_kernel_weight_WLAST,
        m_axi_kernel_weight_WID,
        m_axi_kernel_weight_WUSER,
        m_axi_kernel_weight_ARVALID,
        m_axi_kernel_weight_ARREADY,
        m_axi_kernel_weight_ARADDR,
        m_axi_kernel_weight_ARID,
        m_axi_kernel_weight_ARLEN,
        m_axi_kernel_weight_ARSIZE,
        m_axi_kernel_weight_ARBURST,
        m_axi_kernel_weight_ARLOCK,
        m_axi_kernel_weight_ARCACHE,
        m_axi_kernel_weight_ARPROT,
        m_axi_kernel_weight_ARQOS,
        m_axi_kernel_weight_ARREGION,
        m_axi_kernel_weight_ARUSER,
        m_axi_kernel_weight_RVALID,
        m_axi_kernel_weight_RREADY,
        m_axi_kernel_weight_RDATA,
        m_axi_kernel_weight_RLAST,
        m_axi_kernel_weight_RID,
        m_axi_kernel_weight_RFIFONUM,
        m_axi_kernel_weight_RUSER,
        m_axi_kernel_weight_RRESP,
        m_axi_kernel_weight_BVALID,
        m_axi_kernel_weight_BREADY,
        m_axi_kernel_weight_BRESP,
        m_axi_kernel_weight_BID,
        m_axi_kernel_weight_BUSER,
        sext_ln181,
        weight_address0,
        weight_ce0,
        weight_we0,
        weight_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_kernel_weight_AWVALID;
input   m_axi_kernel_weight_AWREADY;
output  [63:0] m_axi_kernel_weight_AWADDR;
output  [0:0] m_axi_kernel_weight_AWID;
output  [31:0] m_axi_kernel_weight_AWLEN;
output  [2:0] m_axi_kernel_weight_AWSIZE;
output  [1:0] m_axi_kernel_weight_AWBURST;
output  [1:0] m_axi_kernel_weight_AWLOCK;
output  [3:0] m_axi_kernel_weight_AWCACHE;
output  [2:0] m_axi_kernel_weight_AWPROT;
output  [3:0] m_axi_kernel_weight_AWQOS;
output  [3:0] m_axi_kernel_weight_AWREGION;
output  [0:0] m_axi_kernel_weight_AWUSER;
output   m_axi_kernel_weight_WVALID;
input   m_axi_kernel_weight_WREADY;
output  [31:0] m_axi_kernel_weight_WDATA;
output  [3:0] m_axi_kernel_weight_WSTRB;
output   m_axi_kernel_weight_WLAST;
output  [0:0] m_axi_kernel_weight_WID;
output  [0:0] m_axi_kernel_weight_WUSER;
output   m_axi_kernel_weight_ARVALID;
input   m_axi_kernel_weight_ARREADY;
output  [63:0] m_axi_kernel_weight_ARADDR;
output  [0:0] m_axi_kernel_weight_ARID;
output  [31:0] m_axi_kernel_weight_ARLEN;
output  [2:0] m_axi_kernel_weight_ARSIZE;
output  [1:0] m_axi_kernel_weight_ARBURST;
output  [1:0] m_axi_kernel_weight_ARLOCK;
output  [3:0] m_axi_kernel_weight_ARCACHE;
output  [2:0] m_axi_kernel_weight_ARPROT;
output  [3:0] m_axi_kernel_weight_ARQOS;
output  [3:0] m_axi_kernel_weight_ARREGION;
output  [0:0] m_axi_kernel_weight_ARUSER;
input   m_axi_kernel_weight_RVALID;
output   m_axi_kernel_weight_RREADY;
input  [31:0] m_axi_kernel_weight_RDATA;
input   m_axi_kernel_weight_RLAST;
input  [0:0] m_axi_kernel_weight_RID;
input  [8:0] m_axi_kernel_weight_RFIFONUM;
input  [0:0] m_axi_kernel_weight_RUSER;
input  [1:0] m_axi_kernel_weight_RRESP;
input   m_axi_kernel_weight_BVALID;
output   m_axi_kernel_weight_BREADY;
input  [1:0] m_axi_kernel_weight_BRESP;
input  [0:0] m_axi_kernel_weight_BID;
input  [0:0] m_axi_kernel_weight_BUSER;
input  [61:0] sext_ln181;
output  [16:0] weight_address0;
output   weight_ce0;
output   weight_we0;
output  [31:0] weight_d0;

reg ap_idle;
reg m_axi_kernel_weight_RREADY;
reg weight_ce0;
reg weight_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln181_fu_180_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kernel_weight_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] select_ln183_fu_343_p3;
reg   [2:0] select_ln183_reg_568;
wire   [2:0] select_ln183_1_fu_351_p3;
reg   [2:0] select_ln183_1_reg_573;
wire   [13:0] add_ln204_fu_375_p2;
reg   [13:0] add_ln204_reg_578;
reg   [31:0] kernel_weight_addr_read_reg_584;
wire   [63:0] zext_ln204_5_fu_501_p1;
reg   [2:0] i3_fu_86;
wire   [2:0] add_ln184_fu_381_p2;
wire    ap_loop_init;
reg   [2:0] i2_fu_90;
reg   [5:0] indvar_flatten_fu_94;
wire   [5:0] select_ln183_2_fu_393_p3;
reg   [8:0] i1_fu_98;
wire   [8:0] select_ln182_1_fu_317_p3;
reg   [13:0] indvar_flatten12_fu_102;
wire   [13:0] select_ln182_2_fu_407_p3;
reg   [4:0] i0_fu_106;
wire   [4:0] select_ln181_1_fu_265_p3;
reg   [16:0] indvar_flatten34_fu_110;
wire   [16:0] add_ln181_fu_186_p2;
reg   [16:0] ap_sig_allocacmp_indvar_flatten34_load;
wire   [0:0] icmp_ln182_fu_227_p2;
wire   [0:0] icmp_ln183_fu_253_p2;
wire   [0:0] xor_ln181_fu_241_p2;
wire   [4:0] add_ln181_1_fu_221_p2;
wire   [8:0] select_ln181_fu_233_p3;
wire   [0:0] and_ln181_1_fu_259_p2;
wire   [0:0] or_ln182_fu_279_p2;
wire   [0:0] xor_ln182_fu_293_p2;
wire   [0:0] or_ln182_1_fu_299_p2;
wire   [0:0] and_ln181_fu_305_p2;
wire   [0:0] icmp_ln184_fu_247_p2;
wire   [8:0] add_ln182_fu_273_p2;
wire   [2:0] select_ln182_fu_285_p3;
wire   [0:0] and_ln182_fu_311_p2;
wire   [0:0] or_ln183_fu_331_p2;
wire   [0:0] or_ln183_1_fu_337_p2;
wire   [2:0] add_ln183_fu_325_p2;
wire   [12:0] tmp_fu_359_p3;
wire   [13:0] zext_ln182_fu_367_p1;
wire   [13:0] zext_ln204_fu_371_p1;
wire   [5:0] add_ln183_1_fu_387_p2;
wire   [13:0] add_ln182_1_fu_401_p2;
wire   [15:0] tmp_4_fu_448_p3;
wire   [15:0] zext_ln204_1_fu_445_p1;
wire   [15:0] add_ln204_1_fu_455_p2;
wire   [15:0] zext_ln204_2_fu_461_p1;
wire   [15:0] add_ln204_2_fu_464_p2;
wire   [14:0] trunc_ln204_fu_474_p1;
wire   [16:0] tmp_5_fu_478_p3;
wire   [16:0] zext_ln204_3_fu_470_p1;
wire   [16:0] add_ln204_3_fu_486_p2;
wire   [16:0] zext_ln204_4_fu_492_p1;
wire   [16:0] add_ln204_4_fu_495_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 i3_fu_86 = 3'd0;
#0 i2_fu_90 = 3'd0;
#0 indvar_flatten_fu_94 = 6'd0;
#0 i1_fu_98 = 9'd0;
#0 indvar_flatten12_fu_102 = 14'd0;
#0 i0_fu_106 = 5'd0;
#0 indvar_flatten34_fu_110 = 17'd0;
#0 ap_done_reg = 1'b0;
end

kernel_cnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i0_fu_106 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i0_fu_106 <= select_ln181_1_fu_265_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i1_fu_98 <= 9'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i1_fu_98 <= select_ln182_1_fu_317_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i2_fu_90 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i2_fu_90 <= select_ln183_1_fu_351_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i3_fu_86 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i3_fu_86 <= add_ln184_fu_381_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_102 <= 14'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            indvar_flatten12_fu_102 <= select_ln182_2_fu_407_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln181_fu_180_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten34_fu_110 <= add_ln181_fu_186_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten34_fu_110 <= 17'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_94 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            indvar_flatten_fu_94 <= select_ln183_2_fu_393_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln204_reg_578 <= add_ln204_fu_375_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        kernel_weight_addr_read_reg_584 <= m_axi_kernel_weight_RDATA;
        select_ln183_1_reg_573 <= select_ln183_1_fu_351_p3;
        select_ln183_reg_568 <= select_ln183_fu_343_p3;
    end
end

always @ (*) begin
    if (((icmp_ln181_fu_180_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten34_load = 17'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten34_load = indvar_flatten34_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_weight_blk_n_R = m_axi_kernel_weight_RVALID;
    end else begin
        kernel_weight_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_kernel_weight_RREADY = 1'b1;
    end else begin
        m_axi_kernel_weight_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight_we0 = 1'b1;
    end else begin
        weight_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln181_1_fu_221_p2 = (i0_fu_106 + 5'd1);

assign add_ln181_fu_186_p2 = (ap_sig_allocacmp_indvar_flatten34_load + 17'd1);

assign add_ln182_1_fu_401_p2 = (indvar_flatten12_fu_102 + 14'd1);

assign add_ln182_fu_273_p2 = (select_ln181_fu_233_p3 + 9'd1);

assign add_ln183_1_fu_387_p2 = (indvar_flatten_fu_94 + 6'd1);

assign add_ln183_fu_325_p2 = (select_ln182_fu_285_p3 + 3'd1);

assign add_ln184_fu_381_p2 = (select_ln183_fu_343_p3 + 3'd1);

assign add_ln204_1_fu_455_p2 = (tmp_4_fu_448_p3 + zext_ln204_1_fu_445_p1);

assign add_ln204_2_fu_464_p2 = (add_ln204_1_fu_455_p2 + zext_ln204_2_fu_461_p1);

assign add_ln204_3_fu_486_p2 = (tmp_5_fu_478_p3 + zext_ln204_3_fu_470_p1);

assign add_ln204_4_fu_495_p2 = (add_ln204_3_fu_486_p2 + zext_ln204_4_fu_492_p1);

assign add_ln204_fu_375_p2 = (zext_ln182_fu_367_p1 + zext_ln204_fu_371_p1);

assign and_ln181_1_fu_259_p2 = (xor_ln181_fu_241_p2 & icmp_ln183_fu_253_p2);

assign and_ln181_fu_305_p2 = (xor_ln181_fu_241_p2 & or_ln182_1_fu_299_p2);

assign and_ln182_fu_311_p2 = (icmp_ln184_fu_247_p2 & and_ln181_fu_305_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (m_axi_kernel_weight_RVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln181_fu_180_p2 = ((ap_sig_allocacmp_indvar_flatten34_load == 17'd102400) ? 1'b1 : 1'b0);

assign icmp_ln182_fu_227_p2 = ((indvar_flatten12_fu_102 == 14'd6400) ? 1'b1 : 1'b0);

assign icmp_ln183_fu_253_p2 = ((indvar_flatten_fu_94 == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln184_fu_247_p2 = ((i3_fu_86 == 3'd5) ? 1'b1 : 1'b0);

assign m_axi_kernel_weight_ARADDR = 64'd0;

assign m_axi_kernel_weight_ARBURST = 2'd0;

assign m_axi_kernel_weight_ARCACHE = 4'd0;

assign m_axi_kernel_weight_ARID = 1'd0;

assign m_axi_kernel_weight_ARLEN = 32'd0;

assign m_axi_kernel_weight_ARLOCK = 2'd0;

assign m_axi_kernel_weight_ARPROT = 3'd0;

assign m_axi_kernel_weight_ARQOS = 4'd0;

assign m_axi_kernel_weight_ARREGION = 4'd0;

assign m_axi_kernel_weight_ARSIZE = 3'd0;

assign m_axi_kernel_weight_ARUSER = 1'd0;

assign m_axi_kernel_weight_ARVALID = 1'b0;

assign m_axi_kernel_weight_AWADDR = 64'd0;

assign m_axi_kernel_weight_AWBURST = 2'd0;

assign m_axi_kernel_weight_AWCACHE = 4'd0;

assign m_axi_kernel_weight_AWID = 1'd0;

assign m_axi_kernel_weight_AWLEN = 32'd0;

assign m_axi_kernel_weight_AWLOCK = 2'd0;

assign m_axi_kernel_weight_AWPROT = 3'd0;

assign m_axi_kernel_weight_AWQOS = 4'd0;

assign m_axi_kernel_weight_AWREGION = 4'd0;

assign m_axi_kernel_weight_AWSIZE = 3'd0;

assign m_axi_kernel_weight_AWUSER = 1'd0;

assign m_axi_kernel_weight_AWVALID = 1'b0;

assign m_axi_kernel_weight_BREADY = 1'b0;

assign m_axi_kernel_weight_WDATA = 32'd0;

assign m_axi_kernel_weight_WID = 1'd0;

assign m_axi_kernel_weight_WLAST = 1'b0;

assign m_axi_kernel_weight_WSTRB = 4'd0;

assign m_axi_kernel_weight_WUSER = 1'd0;

assign m_axi_kernel_weight_WVALID = 1'b0;

assign or_ln182_1_fu_299_p2 = (xor_ln182_fu_293_p2 | icmp_ln182_fu_227_p2);

assign or_ln182_fu_279_p2 = (icmp_ln182_fu_227_p2 | and_ln181_1_fu_259_p2);

assign or_ln183_1_fu_337_p2 = (or_ln183_fu_331_p2 | icmp_ln182_fu_227_p2);

assign or_ln183_fu_331_p2 = (and_ln182_fu_311_p2 | and_ln181_1_fu_259_p2);

assign select_ln181_1_fu_265_p3 = ((icmp_ln182_fu_227_p2[0:0] == 1'b1) ? add_ln181_1_fu_221_p2 : i0_fu_106);

assign select_ln181_fu_233_p3 = ((icmp_ln182_fu_227_p2[0:0] == 1'b1) ? 9'd0 : i1_fu_98);

assign select_ln182_1_fu_317_p3 = ((and_ln181_1_fu_259_p2[0:0] == 1'b1) ? add_ln182_fu_273_p2 : select_ln181_fu_233_p3);

assign select_ln182_2_fu_407_p3 = ((icmp_ln182_fu_227_p2[0:0] == 1'b1) ? 14'd1 : add_ln182_1_fu_401_p2);

assign select_ln182_fu_285_p3 = ((or_ln182_fu_279_p2[0:0] == 1'b1) ? 3'd0 : i2_fu_90);

assign select_ln183_1_fu_351_p3 = ((and_ln182_fu_311_p2[0:0] == 1'b1) ? add_ln183_fu_325_p2 : select_ln182_fu_285_p3);

assign select_ln183_2_fu_393_p3 = ((or_ln182_fu_279_p2[0:0] == 1'b1) ? 6'd1 : add_ln183_1_fu_387_p2);

assign select_ln183_fu_343_p3 = ((or_ln183_1_fu_337_p2[0:0] == 1'b1) ? 3'd0 : i3_fu_86);

assign tmp_4_fu_448_p3 = {{add_ln204_reg_578}, {2'd0}};

assign tmp_5_fu_478_p3 = {{trunc_ln204_fu_474_p1}, {2'd0}};

assign tmp_fu_359_p3 = {{select_ln181_1_fu_265_p3}, {8'd0}};

assign trunc_ln204_fu_474_p1 = add_ln204_2_fu_464_p2[14:0];

assign weight_address0 = zext_ln204_5_fu_501_p1;

assign weight_d0 = kernel_weight_addr_read_reg_584;

assign xor_ln181_fu_241_p2 = (icmp_ln182_fu_227_p2 ^ 1'd1);

assign xor_ln182_fu_293_p2 = (icmp_ln183_fu_253_p2 ^ 1'd1);

assign zext_ln182_fu_367_p1 = tmp_fu_359_p3;

assign zext_ln204_1_fu_445_p1 = add_ln204_reg_578;

assign zext_ln204_2_fu_461_p1 = select_ln183_1_reg_573;

assign zext_ln204_3_fu_470_p1 = add_ln204_2_fu_464_p2;

assign zext_ln204_4_fu_492_p1 = select_ln183_reg_568;

assign zext_ln204_5_fu_501_p1 = add_ln204_4_fu_495_p2;

assign zext_ln204_fu_371_p1 = select_ln182_1_fu_317_p3;

endmodule //kernel_cnn_load_weight_S0_Pipeline_VITIS_LOOP_181_1_VITIS_LOOP_182_2_VITIS_LOOP_183_3_VITIS
