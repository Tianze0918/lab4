// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_cnn_store_output_S0_Pipeline_VITIS_LOOP_235_1_VITIS_LOOP_236_2_VITIS_LOOP_237_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_kernel_output_AWVALID,
        m_axi_kernel_output_AWREADY,
        m_axi_kernel_output_AWADDR,
        m_axi_kernel_output_AWID,
        m_axi_kernel_output_AWLEN,
        m_axi_kernel_output_AWSIZE,
        m_axi_kernel_output_AWBURST,
        m_axi_kernel_output_AWLOCK,
        m_axi_kernel_output_AWCACHE,
        m_axi_kernel_output_AWPROT,
        m_axi_kernel_output_AWQOS,
        m_axi_kernel_output_AWREGION,
        m_axi_kernel_output_AWUSER,
        m_axi_kernel_output_WVALID,
        m_axi_kernel_output_WREADY,
        m_axi_kernel_output_WDATA,
        m_axi_kernel_output_WSTRB,
        m_axi_kernel_output_WLAST,
        m_axi_kernel_output_WID,
        m_axi_kernel_output_WUSER,
        m_axi_kernel_output_ARVALID,
        m_axi_kernel_output_ARREADY,
        m_axi_kernel_output_ARADDR,
        m_axi_kernel_output_ARID,
        m_axi_kernel_output_ARLEN,
        m_axi_kernel_output_ARSIZE,
        m_axi_kernel_output_ARBURST,
        m_axi_kernel_output_ARLOCK,
        m_axi_kernel_output_ARCACHE,
        m_axi_kernel_output_ARPROT,
        m_axi_kernel_output_ARQOS,
        m_axi_kernel_output_ARREGION,
        m_axi_kernel_output_ARUSER,
        m_axi_kernel_output_RVALID,
        m_axi_kernel_output_RREADY,
        m_axi_kernel_output_RDATA,
        m_axi_kernel_output_RLAST,
        m_axi_kernel_output_RID,
        m_axi_kernel_output_RFIFONUM,
        m_axi_kernel_output_RUSER,
        m_axi_kernel_output_RRESP,
        m_axi_kernel_output_BVALID,
        m_axi_kernel_output_BREADY,
        m_axi_kernel_output_BRESP,
        m_axi_kernel_output_BID,
        m_axi_kernel_output_BUSER,
        sext_ln235,
        output_0_address0,
        output_0_ce0,
        output_0_q0,
        output_1_address0,
        output_1_ce0,
        output_1_q0,
        output_2_address0,
        output_2_ce0,
        output_2_q0,
        output_3_address0,
        output_3_ce0,
        output_3_q0,
        output_4_address0,
        output_4_ce0,
        output_4_q0,
        output_5_address0,
        output_5_ce0,
        output_5_q0,
        output_6_address0,
        output_6_ce0,
        output_6_q0,
        output_7_address0,
        output_7_ce0,
        output_7_q0,
        output_8_address0,
        output_8_ce0,
        output_8_q0,
        output_9_address0,
        output_9_ce0,
        output_9_q0,
        output_10_address0,
        output_10_ce0,
        output_10_q0,
        output_11_address0,
        output_11_ce0,
        output_11_q0,
        output_12_address0,
        output_12_ce0,
        output_12_q0,
        output_13_address0,
        output_13_ce0,
        output_13_q0,
        output_14_address0,
        output_14_ce0,
        output_14_q0,
        output_15_address0,
        output_15_ce0,
        output_15_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_kernel_output_AWVALID;
input   m_axi_kernel_output_AWREADY;
output  [63:0] m_axi_kernel_output_AWADDR;
output  [0:0] m_axi_kernel_output_AWID;
output  [31:0] m_axi_kernel_output_AWLEN;
output  [2:0] m_axi_kernel_output_AWSIZE;
output  [1:0] m_axi_kernel_output_AWBURST;
output  [1:0] m_axi_kernel_output_AWLOCK;
output  [3:0] m_axi_kernel_output_AWCACHE;
output  [2:0] m_axi_kernel_output_AWPROT;
output  [3:0] m_axi_kernel_output_AWQOS;
output  [3:0] m_axi_kernel_output_AWREGION;
output  [0:0] m_axi_kernel_output_AWUSER;
output   m_axi_kernel_output_WVALID;
input   m_axi_kernel_output_WREADY;
output  [511:0] m_axi_kernel_output_WDATA;
output  [63:0] m_axi_kernel_output_WSTRB;
output   m_axi_kernel_output_WLAST;
output  [0:0] m_axi_kernel_output_WID;
output  [0:0] m_axi_kernel_output_WUSER;
output   m_axi_kernel_output_ARVALID;
input   m_axi_kernel_output_ARREADY;
output  [63:0] m_axi_kernel_output_ARADDR;
output  [0:0] m_axi_kernel_output_ARID;
output  [31:0] m_axi_kernel_output_ARLEN;
output  [2:0] m_axi_kernel_output_ARSIZE;
output  [1:0] m_axi_kernel_output_ARBURST;
output  [1:0] m_axi_kernel_output_ARLOCK;
output  [3:0] m_axi_kernel_output_ARCACHE;
output  [2:0] m_axi_kernel_output_ARPROT;
output  [3:0] m_axi_kernel_output_ARQOS;
output  [3:0] m_axi_kernel_output_ARREGION;
output  [0:0] m_axi_kernel_output_ARUSER;
input   m_axi_kernel_output_RVALID;
output   m_axi_kernel_output_RREADY;
input  [511:0] m_axi_kernel_output_RDATA;
input   m_axi_kernel_output_RLAST;
input  [0:0] m_axi_kernel_output_RID;
input  [8:0] m_axi_kernel_output_RFIFONUM;
input  [0:0] m_axi_kernel_output_RUSER;
input  [1:0] m_axi_kernel_output_RRESP;
input   m_axi_kernel_output_BVALID;
output   m_axi_kernel_output_BREADY;
input  [1:0] m_axi_kernel_output_BRESP;
input  [0:0] m_axi_kernel_output_BID;
input  [0:0] m_axi_kernel_output_BUSER;
input  [57:0] sext_ln235;
output  [15:0] output_0_address0;
output   output_0_ce0;
input  [31:0] output_0_q0;
output  [15:0] output_1_address0;
output   output_1_ce0;
input  [31:0] output_1_q0;
output  [15:0] output_2_address0;
output   output_2_ce0;
input  [31:0] output_2_q0;
output  [15:0] output_3_address0;
output   output_3_ce0;
input  [31:0] output_3_q0;
output  [15:0] output_4_address0;
output   output_4_ce0;
input  [31:0] output_4_q0;
output  [15:0] output_5_address0;
output   output_5_ce0;
input  [31:0] output_5_q0;
output  [15:0] output_6_address0;
output   output_6_ce0;
input  [31:0] output_6_q0;
output  [15:0] output_7_address0;
output   output_7_ce0;
input  [31:0] output_7_q0;
output  [15:0] output_8_address0;
output   output_8_ce0;
input  [31:0] output_8_q0;
output  [15:0] output_9_address0;
output   output_9_ce0;
input  [31:0] output_9_q0;
output  [15:0] output_10_address0;
output   output_10_ce0;
input  [31:0] output_10_q0;
output  [15:0] output_11_address0;
output   output_11_ce0;
input  [31:0] output_11_q0;
output  [15:0] output_12_address0;
output   output_12_ce0;
input  [31:0] output_12_q0;
output  [15:0] output_13_address0;
output   output_13_ce0;
input  [31:0] output_13_q0;
output  [15:0] output_14_address0;
output   output_14_ce0;
input  [31:0] output_14_q0;
output  [15:0] output_15_address0;
output   output_15_ce0;
input  [31:0] output_15_q0;

reg ap_idle;
reg m_axi_kernel_output_WVALID;
reg output_0_ce0;
reg output_1_ce0;
reg output_2_ce0;
reg output_3_ce0;
reg output_4_ce0;
reg output_5_ce0;
reg output_6_ce0;
reg output_7_ce0;
reg output_8_ce0;
reg output_9_ce0;
reg output_10_ce0;
reg output_11_ce0;
reg output_12_ce0;
reg output_13_ce0;
reg output_14_ce0;
reg output_15_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln235_fu_405_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kernel_output_blk_n_W;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] or_ln236_fu_481_p2;
reg   [0:0] or_ln236_reg_819;
wire   [7:0] select_ln236_1_fu_487_p3;
reg   [7:0] select_ln236_1_reg_824;
wire   [13:0] sub_ln250_fu_519_p2;
reg   [13:0] sub_ln250_reg_829;
reg   [31:0] output_0_load_reg_914;
reg   [31:0] output_1_load_reg_919;
reg   [31:0] output_2_load_reg_924;
reg   [31:0] output_3_load_reg_929;
reg   [31:0] output_4_load_reg_934;
reg   [31:0] output_5_load_reg_939;
reg   [31:0] output_6_load_reg_944;
reg   [31:0] output_7_load_reg_949;
reg   [31:0] output_8_load_reg_954;
reg   [31:0] output_9_load_reg_959;
reg   [31:0] output_10_load_reg_964;
reg   [31:0] output_11_load_reg_969;
reg   [31:0] output_12_load_reg_974;
reg   [31:0] output_13_load_reg_979;
reg   [31:0] output_14_load_reg_984;
reg   [31:0] output_15_load_reg_989;
wire   [63:0] zext_ln250_4_fu_646_p1;
wire    ap_block_pp0_stage0_01001;
reg   [7:0] i2_fu_122;
wire   [7:0] add_ln237_fu_666_p2;
wire    ap_loop_init;
reg   [3:0] indvar_fu_126;
wire   [3:0] select_ln237_fu_531_p3;
reg   [7:0] i1_fu_130;
reg   [11:0] indvar_flatten_fu_134;
wire   [11:0] select_ln236_2_fu_545_p3;
reg   [4:0] i0_fu_138;
wire   [4:0] select_ln235_1_fu_467_p3;
reg   [15:0] indvar_flatten13_fu_142;
wire   [15:0] add_ln235_fu_411_p2;
wire   [0:0] icmp_ln236_fu_435_p2;
wire   [0:0] icmp_ln237_fu_455_p2;
wire   [0:0] xor_ln235_fu_449_p2;
wire   [4:0] add_ln235_1_fu_429_p2;
wire   [7:0] select_ln235_fu_441_p3;
wire   [0:0] and_ln235_fu_461_p2;
wire   [7:0] add_ln236_fu_475_p2;
wire   [12:0] tmp_fu_495_p3;
wire   [9:0] tmp_1_fu_507_p3;
wire   [13:0] zext_ln250_fu_503_p1;
wire   [13:0] zext_ln250_1_fu_515_p1;
wire   [3:0] add_ln237_1_fu_525_p2;
wire   [11:0] add_ln236_1_fu_539_p2;
wire  signed [14:0] sext_ln236_fu_588_p1;
wire   [14:0] zext_ln250_2_fu_591_p1;
wire   [14:0] add_ln250_fu_594_p2;
wire   [11:0] trunc_ln250_fu_600_p1;
wire   [15:0] tmp_2_fu_604_p3;
wire   [15:0] tmp_3_fu_612_p3;
wire   [7:0] select_ln236_fu_581_p3;
wire   [3:0] lshr_ln_fu_626_p4;
wire   [15:0] sub_ln250_1_fu_620_p2;
wire   [15:0] zext_ln250_3_fu_636_p1;
wire   [15:0] add_ln250_1_fu_640_p2;
wire   [31:0] bitcast_ln271_15_fu_728_p1;
wire   [31:0] bitcast_ln271_14_fu_725_p1;
wire   [31:0] bitcast_ln271_13_fu_722_p1;
wire   [31:0] bitcast_ln271_12_fu_719_p1;
wire   [31:0] bitcast_ln271_11_fu_716_p1;
wire   [31:0] bitcast_ln271_10_fu_713_p1;
wire   [31:0] bitcast_ln271_9_fu_710_p1;
wire   [31:0] bitcast_ln271_8_fu_707_p1;
wire   [31:0] bitcast_ln271_7_fu_704_p1;
wire   [31:0] bitcast_ln271_6_fu_701_p1;
wire   [31:0] bitcast_ln271_5_fu_698_p1;
wire   [31:0] bitcast_ln271_4_fu_695_p1;
wire   [31:0] bitcast_ln271_3_fu_692_p1;
wire   [31:0] bitcast_ln271_2_fu_689_p1;
wire   [31:0] bitcast_ln271_1_fu_686_p1;
wire   [31:0] bitcast_ln271_fu_683_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 i2_fu_122 = 8'd0;
#0 indvar_fu_126 = 4'd0;
#0 i1_fu_130 = 8'd0;
#0 indvar_flatten_fu_134 = 12'd0;
#0 i0_fu_138 = 5'd0;
#0 indvar_flatten13_fu_142 = 16'd0;
#0 ap_done_reg = 1'b0;
end

kernel_cnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i0_fu_138 <= 5'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln235_fu_405_p2 == 1'd0))) begin
            i0_fu_138 <= select_ln235_1_fu_467_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i1_fu_130 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln235_fu_405_p2 == 1'd0))) begin
            i1_fu_130 <= select_ln236_1_fu_487_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i2_fu_122 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            i2_fu_122 <= add_ln237_fu_666_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_142 <= 16'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln235_fu_405_p2 == 1'd0))) begin
            indvar_flatten13_fu_142 <= add_ln235_fu_411_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_134 <= 12'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln235_fu_405_p2 == 1'd0))) begin
            indvar_flatten_fu_134 <= select_ln236_2_fu_545_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_fu_126 <= 4'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln235_fu_405_p2 == 1'd0))) begin
            indvar_fu_126 <= select_ln237_fu_531_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        or_ln236_reg_819 <= or_ln236_fu_481_p2;
        select_ln236_1_reg_824 <= select_ln236_1_fu_487_p3;
        sub_ln250_reg_829[13 : 5] <= sub_ln250_fu_519_p2[13 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        output_0_load_reg_914 <= output_0_q0;
        output_10_load_reg_964 <= output_10_q0;
        output_11_load_reg_969 <= output_11_q0;
        output_12_load_reg_974 <= output_12_q0;
        output_13_load_reg_979 <= output_13_q0;
        output_14_load_reg_984 <= output_14_q0;
        output_15_load_reg_989 <= output_15_q0;
        output_1_load_reg_919 <= output_1_q0;
        output_2_load_reg_924 <= output_2_q0;
        output_3_load_reg_929 <= output_3_q0;
        output_4_load_reg_934 <= output_4_q0;
        output_5_load_reg_939 <= output_5_q0;
        output_6_load_reg_944 <= output_6_q0;
        output_7_load_reg_949 <= output_7_q0;
        output_8_load_reg_954 <= output_8_q0;
        output_9_load_reg_959 <= output_9_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln235_fu_405_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        kernel_output_blk_n_W = m_axi_kernel_output_WREADY;
    end else begin
        kernel_output_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        m_axi_kernel_output_WVALID = 1'b1;
    end else begin
        m_axi_kernel_output_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_10_ce0 = 1'b1;
    end else begin
        output_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_11_ce0 = 1'b1;
    end else begin
        output_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_12_ce0 = 1'b1;
    end else begin
        output_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_13_ce0 = 1'b1;
    end else begin
        output_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_14_ce0 = 1'b1;
    end else begin
        output_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_15_ce0 = 1'b1;
    end else begin
        output_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_2_ce0 = 1'b1;
    end else begin
        output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_3_ce0 = 1'b1;
    end else begin
        output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_4_ce0 = 1'b1;
    end else begin
        output_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_5_ce0 = 1'b1;
    end else begin
        output_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_6_ce0 = 1'b1;
    end else begin
        output_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_7_ce0 = 1'b1;
    end else begin
        output_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_8_ce0 = 1'b1;
    end else begin
        output_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_9_ce0 = 1'b1;
    end else begin
        output_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln235_1_fu_429_p2 = (i0_fu_138 + 5'd1);

assign add_ln235_fu_411_p2 = (indvar_flatten13_fu_142 + 16'd1);

assign add_ln236_1_fu_539_p2 = (indvar_flatten_fu_134 + 12'd1);

assign add_ln236_fu_475_p2 = (select_ln235_fu_441_p3 + 8'd1);

assign add_ln237_1_fu_525_p2 = (indvar_fu_126 + 4'd1);

assign add_ln237_fu_666_p2 = (select_ln236_fu_581_p3 + 8'd16);

assign add_ln250_1_fu_640_p2 = (sub_ln250_1_fu_620_p2 + zext_ln250_3_fu_636_p1);

assign add_ln250_fu_594_p2 = ($signed(sext_ln236_fu_588_p1) + $signed(zext_ln250_2_fu_591_p1));

assign and_ln235_fu_461_p2 = (xor_ln235_fu_449_p2 & icmp_ln237_fu_455_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_kernel_output_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_kernel_output_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bitcast_ln271_10_fu_713_p1 = output_10_load_reg_964;

assign bitcast_ln271_11_fu_716_p1 = output_11_load_reg_969;

assign bitcast_ln271_12_fu_719_p1 = output_12_load_reg_974;

assign bitcast_ln271_13_fu_722_p1 = output_13_load_reg_979;

assign bitcast_ln271_14_fu_725_p1 = output_14_load_reg_984;

assign bitcast_ln271_15_fu_728_p1 = output_15_load_reg_989;

assign bitcast_ln271_1_fu_686_p1 = output_1_load_reg_919;

assign bitcast_ln271_2_fu_689_p1 = output_2_load_reg_924;

assign bitcast_ln271_3_fu_692_p1 = output_3_load_reg_929;

assign bitcast_ln271_4_fu_695_p1 = output_4_load_reg_934;

assign bitcast_ln271_5_fu_698_p1 = output_5_load_reg_939;

assign bitcast_ln271_6_fu_701_p1 = output_6_load_reg_944;

assign bitcast_ln271_7_fu_704_p1 = output_7_load_reg_949;

assign bitcast_ln271_8_fu_707_p1 = output_8_load_reg_954;

assign bitcast_ln271_9_fu_710_p1 = output_9_load_reg_959;

assign bitcast_ln271_fu_683_p1 = output_0_load_reg_914;

assign icmp_ln235_fu_405_p2 = ((indvar_flatten13_fu_142 == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln236_fu_435_p2 = ((indvar_flatten_fu_134 == 12'd3136) ? 1'b1 : 1'b0);

assign icmp_ln237_fu_455_p2 = ((indvar_fu_126 == 4'd14) ? 1'b1 : 1'b0);

assign lshr_ln_fu_626_p4 = {{select_ln236_fu_581_p3[7:4]}};

assign m_axi_kernel_output_ARADDR = 64'd0;

assign m_axi_kernel_output_ARBURST = 2'd0;

assign m_axi_kernel_output_ARCACHE = 4'd0;

assign m_axi_kernel_output_ARID = 1'd0;

assign m_axi_kernel_output_ARLEN = 32'd0;

assign m_axi_kernel_output_ARLOCK = 2'd0;

assign m_axi_kernel_output_ARPROT = 3'd0;

assign m_axi_kernel_output_ARQOS = 4'd0;

assign m_axi_kernel_output_ARREGION = 4'd0;

assign m_axi_kernel_output_ARSIZE = 3'd0;

assign m_axi_kernel_output_ARUSER = 1'd0;

assign m_axi_kernel_output_ARVALID = 1'b0;

assign m_axi_kernel_output_AWADDR = 64'd0;

assign m_axi_kernel_output_AWBURST = 2'd0;

assign m_axi_kernel_output_AWCACHE = 4'd0;

assign m_axi_kernel_output_AWID = 1'd0;

assign m_axi_kernel_output_AWLEN = 32'd0;

assign m_axi_kernel_output_AWLOCK = 2'd0;

assign m_axi_kernel_output_AWPROT = 3'd0;

assign m_axi_kernel_output_AWQOS = 4'd0;

assign m_axi_kernel_output_AWREGION = 4'd0;

assign m_axi_kernel_output_AWSIZE = 3'd0;

assign m_axi_kernel_output_AWUSER = 1'd0;

assign m_axi_kernel_output_AWVALID = 1'b0;

assign m_axi_kernel_output_BREADY = 1'b0;

assign m_axi_kernel_output_RREADY = 1'b0;

assign m_axi_kernel_output_WDATA = {{{{{{{{{{{{{{{{bitcast_ln271_15_fu_728_p1}, {bitcast_ln271_14_fu_725_p1}}, {bitcast_ln271_13_fu_722_p1}}, {bitcast_ln271_12_fu_719_p1}}, {bitcast_ln271_11_fu_716_p1}}, {bitcast_ln271_10_fu_713_p1}}, {bitcast_ln271_9_fu_710_p1}}, {bitcast_ln271_8_fu_707_p1}}, {bitcast_ln271_7_fu_704_p1}}, {bitcast_ln271_6_fu_701_p1}}, {bitcast_ln271_5_fu_698_p1}}, {bitcast_ln271_4_fu_695_p1}}, {bitcast_ln271_3_fu_692_p1}}, {bitcast_ln271_2_fu_689_p1}}, {bitcast_ln271_1_fu_686_p1}}, {bitcast_ln271_fu_683_p1}};

assign m_axi_kernel_output_WID = 1'd0;

assign m_axi_kernel_output_WLAST = 1'b0;

assign m_axi_kernel_output_WSTRB = 64'd18446744073709551615;

assign m_axi_kernel_output_WUSER = 1'd0;

assign or_ln236_fu_481_p2 = (icmp_ln236_fu_435_p2 | and_ln235_fu_461_p2);

assign output_0_address0 = zext_ln250_4_fu_646_p1;

assign output_10_address0 = zext_ln250_4_fu_646_p1;

assign output_11_address0 = zext_ln250_4_fu_646_p1;

assign output_12_address0 = zext_ln250_4_fu_646_p1;

assign output_13_address0 = zext_ln250_4_fu_646_p1;

assign output_14_address0 = zext_ln250_4_fu_646_p1;

assign output_15_address0 = zext_ln250_4_fu_646_p1;

assign output_1_address0 = zext_ln250_4_fu_646_p1;

assign output_2_address0 = zext_ln250_4_fu_646_p1;

assign output_3_address0 = zext_ln250_4_fu_646_p1;

assign output_4_address0 = zext_ln250_4_fu_646_p1;

assign output_5_address0 = zext_ln250_4_fu_646_p1;

assign output_6_address0 = zext_ln250_4_fu_646_p1;

assign output_7_address0 = zext_ln250_4_fu_646_p1;

assign output_8_address0 = zext_ln250_4_fu_646_p1;

assign output_9_address0 = zext_ln250_4_fu_646_p1;

assign select_ln235_1_fu_467_p3 = ((icmp_ln236_fu_435_p2[0:0] == 1'b1) ? add_ln235_1_fu_429_p2 : i0_fu_138);

assign select_ln235_fu_441_p3 = ((icmp_ln236_fu_435_p2[0:0] == 1'b1) ? 8'd0 : i1_fu_130);

assign select_ln236_1_fu_487_p3 = ((and_ln235_fu_461_p2[0:0] == 1'b1) ? add_ln236_fu_475_p2 : select_ln235_fu_441_p3);

assign select_ln236_2_fu_545_p3 = ((icmp_ln236_fu_435_p2[0:0] == 1'b1) ? 12'd1 : add_ln236_1_fu_539_p2);

assign select_ln236_fu_581_p3 = ((or_ln236_reg_819[0:0] == 1'b1) ? 8'd0 : i2_fu_122);

assign select_ln237_fu_531_p3 = ((or_ln236_fu_481_p2[0:0] == 1'b1) ? 4'd1 : add_ln237_1_fu_525_p2);

assign sext_ln236_fu_588_p1 = $signed(sub_ln250_reg_829);

assign sub_ln250_1_fu_620_p2 = (tmp_2_fu_604_p3 - tmp_3_fu_612_p3);

assign sub_ln250_fu_519_p2 = (zext_ln250_fu_503_p1 - zext_ln250_1_fu_515_p1);

assign tmp_1_fu_507_p3 = {{select_ln235_1_fu_467_p3}, {5'd0}};

assign tmp_2_fu_604_p3 = {{trunc_ln250_fu_600_p1}, {4'd0}};

assign tmp_3_fu_612_p3 = {{add_ln250_fu_594_p2}, {1'd0}};

assign tmp_fu_495_p3 = {{select_ln235_1_fu_467_p3}, {8'd0}};

assign trunc_ln250_fu_600_p1 = add_ln250_fu_594_p2[11:0];

assign xor_ln235_fu_449_p2 = (icmp_ln236_fu_435_p2 ^ 1'd1);

assign zext_ln250_1_fu_515_p1 = tmp_1_fu_507_p3;

assign zext_ln250_2_fu_591_p1 = select_ln236_1_reg_824;

assign zext_ln250_3_fu_636_p1 = lshr_ln_fu_626_p4;

assign zext_ln250_4_fu_646_p1 = add_ln250_1_fu_640_p2;

assign zext_ln250_fu_503_p1 = tmp_fu_495_p3;

always @ (posedge ap_clk) begin
    sub_ln250_reg_829[4:0] <= 5'b00000;
end

endmodule //kernel_cnn_store_output_S0_Pipeline_VITIS_LOOP_235_1_VITIS_LOOP_236_2_VITIS_LOOP_237_3
