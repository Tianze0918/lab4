-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_cnn_store_output_S0_Pipeline_VITIS_LOOP_235_1_VITIS_LOOP_236_2_VITIS_LOOP_237_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_kernel_output_AWVALID : OUT STD_LOGIC;
    m_axi_kernel_output_AWREADY : IN STD_LOGIC;
    m_axi_kernel_output_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_kernel_output_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_output_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_output_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_output_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_WVALID : OUT STD_LOGIC;
    m_axi_kernel_output_WREADY : IN STD_LOGIC;
    m_axi_kernel_output_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_kernel_output_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_kernel_output_WLAST : OUT STD_LOGIC;
    m_axi_kernel_output_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_ARVALID : OUT STD_LOGIC;
    m_axi_kernel_output_ARREADY : IN STD_LOGIC;
    m_axi_kernel_output_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_kernel_output_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_output_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_output_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_output_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_RVALID : IN STD_LOGIC;
    m_axi_kernel_output_RREADY : OUT STD_LOGIC;
    m_axi_kernel_output_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_kernel_output_RLAST : IN STD_LOGIC;
    m_axi_kernel_output_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_kernel_output_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_BVALID : IN STD_LOGIC;
    m_axi_kernel_output_BREADY : OUT STD_LOGIC;
    m_axi_kernel_output_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln235 : IN STD_LOGIC_VECTOR (57 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_1_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_1_ce0 : OUT STD_LOGIC;
    output_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_2_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_2_ce0 : OUT STD_LOGIC;
    output_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_3_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_3_ce0 : OUT STD_LOGIC;
    output_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_4_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_4_ce0 : OUT STD_LOGIC;
    output_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_5_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_5_ce0 : OUT STD_LOGIC;
    output_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_6_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_6_ce0 : OUT STD_LOGIC;
    output_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_7_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_7_ce0 : OUT STD_LOGIC;
    output_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_8_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_8_ce0 : OUT STD_LOGIC;
    output_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_9_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_9_ce0 : OUT STD_LOGIC;
    output_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_10_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_10_ce0 : OUT STD_LOGIC;
    output_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_11_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_11_ce0 : OUT STD_LOGIC;
    output_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_12_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_12_ce0 : OUT STD_LOGIC;
    output_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_13_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_13_ce0 : OUT STD_LOGIC;
    output_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_14_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_14_ce0 : OUT STD_LOGIC;
    output_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_15_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_15_ce0 : OUT STD_LOGIC;
    output_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_cnn_store_output_S0_Pipeline_VITIS_LOOP_235_1_VITIS_LOOP_236_2_VITIS_LOOP_237_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_C400 : STD_LOGIC_VECTOR (15 downto 0) := "1100010000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv12_C40 : STD_LOGIC_VECTOR (11 downto 0) := "110001000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln235_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal kernel_output_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln236_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln236_reg_819 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln236_1_fu_487_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln236_1_reg_824 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln250_fu_519_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln250_reg_829 : STD_LOGIC_VECTOR (13 downto 0);
    signal output_0_load_reg_914 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_1_load_reg_919 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_2_load_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_3_load_reg_929 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_4_load_reg_934 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_5_load_reg_939 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_6_load_reg_944 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_7_load_reg_949 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_8_load_reg_954 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_9_load_reg_959 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_10_load_reg_964 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_11_load_reg_969 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_12_load_reg_974 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_13_load_reg_979 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_14_load_reg_984 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_15_load_reg_989 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln250_4_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i2_fu_122 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln237_fu_666_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal indvar_fu_126 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln237_fu_531_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_fu_130 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal indvar_flatten_fu_134 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal select_ln236_2_fu_545_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal i0_fu_138 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln235_1_fu_467_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten13_fu_142 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln235_fu_411_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln236_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln237_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln235_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln235_1_fu_429_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln235_fu_441_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln235_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln236_fu_475_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_495_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_fu_507_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln250_fu_503_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln250_1_fu_515_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln237_1_fu_525_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln236_1_fu_539_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln236_fu_588_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln250_2_fu_591_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln250_fu_594_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln250_fu_600_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_604_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_612_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln236_fu_581_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_626_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln250_1_fu_620_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln250_3_fu_636_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln250_1_fu_640_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln271_15_fu_728_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_14_fu_725_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_13_fu_722_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_12_fu_719_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_11_fu_716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_10_fu_713_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_9_fu_710_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_8_fu_707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_7_fu_704_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_6_fu_701_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_5_fu_698_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_4_fu_695_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_3_fu_692_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_2_fu_689_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_1_fu_686_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln271_fu_683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_cnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component kernel_cnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i0_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i0_fu_138 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln235_fu_405_p2 = ap_const_lv1_0))) then 
                    i0_fu_138 <= select_ln235_1_fu_467_p3;
                end if;
            end if; 
        end if;
    end process;

    i1_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i1_fu_130 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln235_fu_405_p2 = ap_const_lv1_0))) then 
                    i1_fu_130 <= select_ln236_1_fu_487_p3;
                end if;
            end if; 
        end if;
    end process;

    i2_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i2_fu_122 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    i2_fu_122 <= add_ln237_fu_666_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_142 <= ap_const_lv16_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln235_fu_405_p2 = ap_const_lv1_0))) then 
                    indvar_flatten13_fu_142 <= add_ln235_fu_411_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_134 <= ap_const_lv12_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln235_fu_405_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_134 <= select_ln236_2_fu_545_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_fu_126 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln235_fu_405_p2 = ap_const_lv1_0))) then 
                    indvar_fu_126 <= select_ln237_fu_531_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                or_ln236_reg_819 <= or_ln236_fu_481_p2;
                select_ln236_1_reg_824 <= select_ln236_1_fu_487_p3;
                    sub_ln250_reg_829(13 downto 5) <= sub_ln250_fu_519_p2(13 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                output_0_load_reg_914 <= output_0_q0;
                output_10_load_reg_964 <= output_10_q0;
                output_11_load_reg_969 <= output_11_q0;
                output_12_load_reg_974 <= output_12_q0;
                output_13_load_reg_979 <= output_13_q0;
                output_14_load_reg_984 <= output_14_q0;
                output_15_load_reg_989 <= output_15_q0;
                output_1_load_reg_919 <= output_1_q0;
                output_2_load_reg_924 <= output_2_q0;
                output_3_load_reg_929 <= output_3_q0;
                output_4_load_reg_934 <= output_4_q0;
                output_5_load_reg_939 <= output_5_q0;
                output_6_load_reg_944 <= output_6_q0;
                output_7_load_reg_949 <= output_7_q0;
                output_8_load_reg_954 <= output_8_q0;
                output_9_load_reg_959 <= output_9_q0;
            end if;
        end if;
    end process;
    sub_ln250_reg_829(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln235_1_fu_429_p2 <= std_logic_vector(unsigned(i0_fu_138) + unsigned(ap_const_lv5_1));
    add_ln235_fu_411_p2 <= std_logic_vector(unsigned(indvar_flatten13_fu_142) + unsigned(ap_const_lv16_1));
    add_ln236_1_fu_539_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_134) + unsigned(ap_const_lv12_1));
    add_ln236_fu_475_p2 <= std_logic_vector(unsigned(select_ln235_fu_441_p3) + unsigned(ap_const_lv8_1));
    add_ln237_1_fu_525_p2 <= std_logic_vector(unsigned(indvar_fu_126) + unsigned(ap_const_lv4_1));
    add_ln237_fu_666_p2 <= std_logic_vector(unsigned(select_ln236_fu_581_p3) + unsigned(ap_const_lv8_10));
    add_ln250_1_fu_640_p2 <= std_logic_vector(unsigned(sub_ln250_1_fu_620_p2) + unsigned(zext_ln250_3_fu_636_p1));
    add_ln250_fu_594_p2 <= std_logic_vector(signed(sext_ln236_fu_588_p1) + signed(zext_ln250_2_fu_591_p1));
    and_ln235_fu_461_p2 <= (xor_ln235_fu_449_p2 and icmp_ln237_fu_455_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_kernel_output_WREADY)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_kernel_output_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_kernel_output_WREADY)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_kernel_output_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln235_fu_405_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln235_fu_405_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln271_10_fu_713_p1 <= output_10_load_reg_964;
    bitcast_ln271_11_fu_716_p1 <= output_11_load_reg_969;
    bitcast_ln271_12_fu_719_p1 <= output_12_load_reg_974;
    bitcast_ln271_13_fu_722_p1 <= output_13_load_reg_979;
    bitcast_ln271_14_fu_725_p1 <= output_14_load_reg_984;
    bitcast_ln271_15_fu_728_p1 <= output_15_load_reg_989;
    bitcast_ln271_1_fu_686_p1 <= output_1_load_reg_919;
    bitcast_ln271_2_fu_689_p1 <= output_2_load_reg_924;
    bitcast_ln271_3_fu_692_p1 <= output_3_load_reg_929;
    bitcast_ln271_4_fu_695_p1 <= output_4_load_reg_934;
    bitcast_ln271_5_fu_698_p1 <= output_5_load_reg_939;
    bitcast_ln271_6_fu_701_p1 <= output_6_load_reg_944;
    bitcast_ln271_7_fu_704_p1 <= output_7_load_reg_949;
    bitcast_ln271_8_fu_707_p1 <= output_8_load_reg_954;
    bitcast_ln271_9_fu_710_p1 <= output_9_load_reg_959;
    bitcast_ln271_fu_683_p1 <= output_0_load_reg_914;
    icmp_ln235_fu_405_p2 <= "1" when (indvar_flatten13_fu_142 = ap_const_lv16_C400) else "0";
    icmp_ln236_fu_435_p2 <= "1" when (indvar_flatten_fu_134 = ap_const_lv12_C40) else "0";
    icmp_ln237_fu_455_p2 <= "1" when (indvar_fu_126 = ap_const_lv4_E) else "0";

    kernel_output_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_kernel_output_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            kernel_output_blk_n_W <= m_axi_kernel_output_WREADY;
        else 
            kernel_output_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    lshr_ln_fu_626_p4 <= select_ln236_fu_581_p3(7 downto 4);
    m_axi_kernel_output_ARADDR <= ap_const_lv64_0;
    m_axi_kernel_output_ARBURST <= ap_const_lv2_0;
    m_axi_kernel_output_ARCACHE <= ap_const_lv4_0;
    m_axi_kernel_output_ARID <= ap_const_lv1_0;
    m_axi_kernel_output_ARLEN <= ap_const_lv32_0;
    m_axi_kernel_output_ARLOCK <= ap_const_lv2_0;
    m_axi_kernel_output_ARPROT <= ap_const_lv3_0;
    m_axi_kernel_output_ARQOS <= ap_const_lv4_0;
    m_axi_kernel_output_ARREGION <= ap_const_lv4_0;
    m_axi_kernel_output_ARSIZE <= ap_const_lv3_0;
    m_axi_kernel_output_ARUSER <= ap_const_lv1_0;
    m_axi_kernel_output_ARVALID <= ap_const_logic_0;
    m_axi_kernel_output_AWADDR <= ap_const_lv64_0;
    m_axi_kernel_output_AWBURST <= ap_const_lv2_0;
    m_axi_kernel_output_AWCACHE <= ap_const_lv4_0;
    m_axi_kernel_output_AWID <= ap_const_lv1_0;
    m_axi_kernel_output_AWLEN <= ap_const_lv32_0;
    m_axi_kernel_output_AWLOCK <= ap_const_lv2_0;
    m_axi_kernel_output_AWPROT <= ap_const_lv3_0;
    m_axi_kernel_output_AWQOS <= ap_const_lv4_0;
    m_axi_kernel_output_AWREGION <= ap_const_lv4_0;
    m_axi_kernel_output_AWSIZE <= ap_const_lv3_0;
    m_axi_kernel_output_AWUSER <= ap_const_lv1_0;
    m_axi_kernel_output_AWVALID <= ap_const_logic_0;
    m_axi_kernel_output_BREADY <= ap_const_logic_0;
    m_axi_kernel_output_RREADY <= ap_const_logic_0;
    m_axi_kernel_output_WDATA <= (((((((((((((((bitcast_ln271_15_fu_728_p1 & bitcast_ln271_14_fu_725_p1) & bitcast_ln271_13_fu_722_p1) & bitcast_ln271_12_fu_719_p1) & bitcast_ln271_11_fu_716_p1) & bitcast_ln271_10_fu_713_p1) & bitcast_ln271_9_fu_710_p1) & bitcast_ln271_8_fu_707_p1) & bitcast_ln271_7_fu_704_p1) & bitcast_ln271_6_fu_701_p1) & bitcast_ln271_5_fu_698_p1) & bitcast_ln271_4_fu_695_p1) & bitcast_ln271_3_fu_692_p1) & bitcast_ln271_2_fu_689_p1) & bitcast_ln271_1_fu_686_p1) & bitcast_ln271_fu_683_p1);
    m_axi_kernel_output_WID <= ap_const_lv1_0;
    m_axi_kernel_output_WLAST <= ap_const_logic_0;
    m_axi_kernel_output_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_kernel_output_WUSER <= ap_const_lv1_0;

    m_axi_kernel_output_WVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            m_axi_kernel_output_WVALID <= ap_const_logic_1;
        else 
            m_axi_kernel_output_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln236_fu_481_p2 <= (icmp_ln236_fu_435_p2 or and_ln235_fu_461_p2);
    output_0_address0 <= zext_ln250_4_fu_646_p1(16 - 1 downto 0);

    output_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_10_address0 <= zext_ln250_4_fu_646_p1(16 - 1 downto 0);

    output_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_10_ce0 <= ap_const_logic_1;
        else 
            output_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_11_address0 <= zext_ln250_4_fu_646_p1(16 - 1 downto 0);

    output_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_11_ce0 <= ap_const_logic_1;
        else 
            output_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_12_address0 <= zext_ln250_4_fu_646_p1(16 - 1 downto 0);

    output_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_12_ce0 <= ap_const_logic_1;
        else 
            output_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_13_address0 <= zext_ln250_4_fu_646_p1(16 - 1 downto 0);

    output_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_13_ce0 <= ap_const_logic_1;
        else 
            output_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_14_address0 <= zext_ln250_4_fu_646_p1(16 - 1 downto 0);

    output_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_14_ce0 <= ap_const_logic_1;
        else 
            output_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_15_address0 <= zext_ln250_4_fu_646_p1(16 - 1 downto 0);

    output_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_15_ce0 <= ap_const_logic_1;
        else 
            output_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_address0 <= zext_ln250_4_fu_646_p1(16 - 1 downto 0);

    output_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_1_ce0 <= ap_const_logic_1;
        else 
            output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_address0 <= zext_ln250_4_fu_646_p1(16 - 1 downto 0);

    output_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_2_ce0 <= ap_const_logic_1;
        else 
            output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_address0 <= zext_ln250_4_fu_646_p1(16 - 1 downto 0);

    output_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_3_ce0 <= ap_const_logic_1;
        else 
            output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_4_address0 <= zext_ln250_4_fu_646_p1(16 - 1 downto 0);

    output_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_4_ce0 <= ap_const_logic_1;
        else 
            output_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_5_address0 <= zext_ln250_4_fu_646_p1(16 - 1 downto 0);

    output_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_5_ce0 <= ap_const_logic_1;
        else 
            output_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_6_address0 <= zext_ln250_4_fu_646_p1(16 - 1 downto 0);

    output_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_6_ce0 <= ap_const_logic_1;
        else 
            output_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_7_address0 <= zext_ln250_4_fu_646_p1(16 - 1 downto 0);

    output_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_7_ce0 <= ap_const_logic_1;
        else 
            output_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_8_address0 <= zext_ln250_4_fu_646_p1(16 - 1 downto 0);

    output_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_8_ce0 <= ap_const_logic_1;
        else 
            output_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_9_address0 <= zext_ln250_4_fu_646_p1(16 - 1 downto 0);

    output_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_9_ce0 <= ap_const_logic_1;
        else 
            output_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln235_1_fu_467_p3 <= 
        add_ln235_1_fu_429_p2 when (icmp_ln236_fu_435_p2(0) = '1') else 
        i0_fu_138;
    select_ln235_fu_441_p3 <= 
        ap_const_lv8_0 when (icmp_ln236_fu_435_p2(0) = '1') else 
        i1_fu_130;
    select_ln236_1_fu_487_p3 <= 
        add_ln236_fu_475_p2 when (and_ln235_fu_461_p2(0) = '1') else 
        select_ln235_fu_441_p3;
    select_ln236_2_fu_545_p3 <= 
        ap_const_lv12_1 when (icmp_ln236_fu_435_p2(0) = '1') else 
        add_ln236_1_fu_539_p2;
    select_ln236_fu_581_p3 <= 
        ap_const_lv8_0 when (or_ln236_reg_819(0) = '1') else 
        i2_fu_122;
    select_ln237_fu_531_p3 <= 
        ap_const_lv4_1 when (or_ln236_fu_481_p2(0) = '1') else 
        add_ln237_1_fu_525_p2;
        sext_ln236_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln250_reg_829),15));

    sub_ln250_1_fu_620_p2 <= std_logic_vector(unsigned(tmp_2_fu_604_p3) - unsigned(tmp_3_fu_612_p3));
    sub_ln250_fu_519_p2 <= std_logic_vector(unsigned(zext_ln250_fu_503_p1) - unsigned(zext_ln250_1_fu_515_p1));
    tmp_1_fu_507_p3 <= (select_ln235_1_fu_467_p3 & ap_const_lv5_0);
    tmp_2_fu_604_p3 <= (trunc_ln250_fu_600_p1 & ap_const_lv4_0);
    tmp_3_fu_612_p3 <= (add_ln250_fu_594_p2 & ap_const_lv1_0);
    tmp_fu_495_p3 <= (select_ln235_1_fu_467_p3 & ap_const_lv8_0);
    trunc_ln250_fu_600_p1 <= add_ln250_fu_594_p2(12 - 1 downto 0);
    xor_ln235_fu_449_p2 <= (icmp_ln236_fu_435_p2 xor ap_const_lv1_1);
    zext_ln250_1_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_507_p3),14));
    zext_ln250_2_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln236_1_reg_824),15));
    zext_ln250_3_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_626_p4),16));
    zext_ln250_4_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln250_1_fu_640_p2),64));
    zext_ln250_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_495_p3),14));
end behav;
