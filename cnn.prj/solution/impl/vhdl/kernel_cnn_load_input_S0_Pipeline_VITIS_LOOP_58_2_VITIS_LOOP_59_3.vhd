-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_cnn_load_input_S0_Pipeline_VITIS_LOOP_58_2_VITIS_LOOP_59_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_kernel_input_AWVALID : OUT STD_LOGIC;
    m_axi_kernel_input_AWREADY : IN STD_LOGIC;
    m_axi_kernel_input_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_kernel_input_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_input_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_input_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_input_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_input_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_input_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_input_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_input_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_input_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_input_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_input_WVALID : OUT STD_LOGIC;
    m_axi_kernel_input_WREADY : IN STD_LOGIC;
    m_axi_kernel_input_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_kernel_input_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_kernel_input_WLAST : OUT STD_LOGIC;
    m_axi_kernel_input_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_input_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_input_ARVALID : OUT STD_LOGIC;
    m_axi_kernel_input_ARREADY : IN STD_LOGIC;
    m_axi_kernel_input_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_kernel_input_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_input_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_input_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_input_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_input_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_input_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_input_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_input_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_input_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_input_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_input_RVALID : IN STD_LOGIC;
    m_axi_kernel_input_RREADY : OUT STD_LOGIC;
    m_axi_kernel_input_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_kernel_input_RLAST : IN STD_LOGIC;
    m_axi_kernel_input_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_input_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_kernel_input_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_input_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_input_BVALID : IN STD_LOGIC;
    m_axi_kernel_input_BREADY : OUT STD_LOGIC;
    m_axi_kernel_input_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_input_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_input_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln58 : IN STD_LOGIC_VECTOR (59 downto 0);
    input_0_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_we0 : OUT STD_LOGIC;
    input_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_1_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_1_ce0 : OUT STD_LOGIC;
    input_1_we0 : OUT STD_LOGIC;
    input_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_2_ce0 : OUT STD_LOGIC;
    input_2_we0 : OUT STD_LOGIC;
    input_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_3_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_3_ce0 : OUT STD_LOGIC;
    input_3_we0 : OUT STD_LOGIC;
    input_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_cnn_load_input_S0_Pipeline_VITIS_LOOP_58_2_VITIS_LOOP_59_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_32C4 : STD_LOGIC_VECTOR (13 downto 0) := "11001011000100";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv14_39 : STD_LOGIC_VECTOR (13 downto 0) := "00000000111001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln58_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal kernel_input_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln59_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_407 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_407_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln71_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln71_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln71_1_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln71_2_reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln71_3_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln77_2_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i2_fu_86 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln59_fu_327_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal indvar_fu_90 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln59_fu_240_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_load : STD_LOGIC_VECTOR (5 downto 0);
    signal i1_fu_94 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln58_1_fu_222_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_i1_load : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_98 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal add_ln58_fu_198_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln58_1_fu_210_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_1_fu_234_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln58_fu_272_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_279_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_361_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_361_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_361_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_361_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_361_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_361_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_361_p20 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component kernel_cnn_mac_muladd_8ns_6ns_6ns_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component kernel_cnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_8ns_6ns_6ns_14_4_1_U49 : component kernel_cnn_mac_muladd_8ns_6ns_6ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_361_p0,
        din1 => grp_fu_361_p1,
        din2 => grp_fu_361_p2,
        ce => grp_fu_361_ce,
        dout => grp_fu_361_p3);

    flow_control_loop_pipe_sequential_init_U : component kernel_cnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i1_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln58_fu_192_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i1_fu_94 <= select_ln58_1_fu_222_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i1_fu_94 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    i2_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i2_fu_86 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    i2_fu_86 <= add_ln59_fu_327_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln58_fu_192_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_98 <= add_ln58_fu_198_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_98 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln58_fu_192_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_fu_90 <= select_ln59_fu_240_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_fu_90 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln59_reg_407 <= icmp_ln59_fu_216_p2;
                icmp_ln59_reg_407_pp0_iter1_reg <= icmp_ln59_reg_407;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                trunc_ln71_1_reg_427 <= m_axi_kernel_input_RDATA(63 downto 32);
                trunc_ln71_2_reg_432 <= m_axi_kernel_input_RDATA(95 downto 64);
                trunc_ln71_3_reg_437 <= m_axi_kernel_input_RDATA(127 downto 96);
                trunc_ln71_reg_422 <= trunc_ln71_fu_293_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln58_1_fu_210_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i1_load) + unsigned(ap_const_lv8_1));
    add_ln58_fu_198_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv14_1));
    add_ln59_1_fu_234_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_load) + unsigned(ap_const_lv6_1));
    add_ln59_fu_327_p2 <= std_logic_vector(unsigned(select_ln58_fu_272_p3) + unsigned(ap_const_lv8_4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(m_axi_kernel_input_RVALID)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (m_axi_kernel_input_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln58_fu_192_p2)
    begin
        if (((icmp_ln58_fu_192_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i1_fu_94)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i1_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i1_load <= i1_fu_94;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_fu_90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_load <= indvar_fu_90;
        end if; 
    end process;


    grp_fu_361_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_361_ce <= ap_const_logic_1;
        else 
            grp_fu_361_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_361_p0 <= grp_fu_361_p00(8 - 1 downto 0);
    grp_fu_361_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln58_1_fu_222_p3),14));
    grp_fu_361_p1 <= ap_const_lv14_39(6 - 1 downto 0);
    grp_fu_361_p2 <= grp_fu_361_p20(6 - 1 downto 0);
    grp_fu_361_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_279_p4),14));
    icmp_ln58_fu_192_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv14_32C4) else "0";
    icmp_ln59_fu_216_p2 <= "1" when (ap_sig_allocacmp_indvar_load = ap_const_lv6_39) else "0";
    input_0_address0 <= zext_ln77_2_fu_338_p1(14 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_0_d0 <= trunc_ln71_reg_422;

    input_0_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_0_we0 <= ap_const_logic_1;
        else 
            input_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_address0 <= zext_ln77_2_fu_338_p1(14 - 1 downto 0);

    input_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_d0 <= trunc_ln71_1_reg_427;

    input_1_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_1_we0 <= ap_const_logic_1;
        else 
            input_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_address0 <= zext_ln77_2_fu_338_p1(14 - 1 downto 0);

    input_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_2_ce0 <= ap_const_logic_1;
        else 
            input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_d0 <= trunc_ln71_2_reg_432;

    input_2_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_2_we0 <= ap_const_logic_1;
        else 
            input_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_address0 <= zext_ln77_2_fu_338_p1(14 - 1 downto 0);

    input_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_3_ce0 <= ap_const_logic_1;
        else 
            input_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_d0 <= trunc_ln71_3_reg_437;

    input_3_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_3_we0 <= ap_const_logic_1;
        else 
            input_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_input_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_kernel_input_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            kernel_input_blk_n_R <= m_axi_kernel_input_RVALID;
        else 
            kernel_input_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    lshr_ln_fu_279_p4 <= select_ln58_fu_272_p3(7 downto 2);
    m_axi_kernel_input_ARADDR <= ap_const_lv64_0;
    m_axi_kernel_input_ARBURST <= ap_const_lv2_0;
    m_axi_kernel_input_ARCACHE <= ap_const_lv4_0;
    m_axi_kernel_input_ARID <= ap_const_lv1_0;
    m_axi_kernel_input_ARLEN <= ap_const_lv32_0;
    m_axi_kernel_input_ARLOCK <= ap_const_lv2_0;
    m_axi_kernel_input_ARPROT <= ap_const_lv3_0;
    m_axi_kernel_input_ARQOS <= ap_const_lv4_0;
    m_axi_kernel_input_ARREGION <= ap_const_lv4_0;
    m_axi_kernel_input_ARSIZE <= ap_const_lv3_0;
    m_axi_kernel_input_ARUSER <= ap_const_lv1_0;
    m_axi_kernel_input_ARVALID <= ap_const_logic_0;
    m_axi_kernel_input_AWADDR <= ap_const_lv64_0;
    m_axi_kernel_input_AWBURST <= ap_const_lv2_0;
    m_axi_kernel_input_AWCACHE <= ap_const_lv4_0;
    m_axi_kernel_input_AWID <= ap_const_lv1_0;
    m_axi_kernel_input_AWLEN <= ap_const_lv32_0;
    m_axi_kernel_input_AWLOCK <= ap_const_lv2_0;
    m_axi_kernel_input_AWPROT <= ap_const_lv3_0;
    m_axi_kernel_input_AWQOS <= ap_const_lv4_0;
    m_axi_kernel_input_AWREGION <= ap_const_lv4_0;
    m_axi_kernel_input_AWSIZE <= ap_const_lv3_0;
    m_axi_kernel_input_AWUSER <= ap_const_lv1_0;
    m_axi_kernel_input_AWVALID <= ap_const_logic_0;
    m_axi_kernel_input_BREADY <= ap_const_logic_0;

    m_axi_kernel_input_RREADY_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axi_kernel_input_RREADY <= ap_const_logic_1;
        else 
            m_axi_kernel_input_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_kernel_input_WDATA <= ap_const_lv128_lc_1;
    m_axi_kernel_input_WID <= ap_const_lv1_0;
    m_axi_kernel_input_WLAST <= ap_const_logic_0;
    m_axi_kernel_input_WSTRB <= ap_const_lv16_0;
    m_axi_kernel_input_WUSER <= ap_const_lv1_0;
    m_axi_kernel_input_WVALID <= ap_const_logic_0;
    select_ln58_1_fu_222_p3 <= 
        add_ln58_1_fu_210_p2 when (icmp_ln59_fu_216_p2(0) = '1') else 
        ap_sig_allocacmp_i1_load;
    select_ln58_fu_272_p3 <= 
        ap_const_lv8_0 when (icmp_ln59_reg_407_pp0_iter1_reg(0) = '1') else 
        i2_fu_86;
    select_ln59_fu_240_p3 <= 
        ap_const_lv6_1 when (icmp_ln59_fu_216_p2(0) = '1') else 
        add_ln59_1_fu_234_p2;
    trunc_ln71_fu_293_p1 <= m_axi_kernel_input_RDATA(32 - 1 downto 0);
    zext_ln77_2_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_361_p3),64));
end behav;
