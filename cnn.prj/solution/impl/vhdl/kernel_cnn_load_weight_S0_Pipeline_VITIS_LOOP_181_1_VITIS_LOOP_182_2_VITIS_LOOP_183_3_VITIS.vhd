-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_cnn_load_weight_S0_Pipeline_VITIS_LOOP_181_1_VITIS_LOOP_182_2_VITIS_LOOP_183_3_VITIS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_kernel_weight_AWVALID : OUT STD_LOGIC;
    m_axi_kernel_weight_AWREADY : IN STD_LOGIC;
    m_axi_kernel_weight_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_kernel_weight_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_weight_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_weight_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_weight_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_weight_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_weight_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_weight_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_weight_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_weight_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_weight_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_weight_WVALID : OUT STD_LOGIC;
    m_axi_kernel_weight_WREADY : IN STD_LOGIC;
    m_axi_kernel_weight_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_weight_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_weight_WLAST : OUT STD_LOGIC;
    m_axi_kernel_weight_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_weight_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_weight_ARVALID : OUT STD_LOGIC;
    m_axi_kernel_weight_ARREADY : IN STD_LOGIC;
    m_axi_kernel_weight_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_kernel_weight_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_weight_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_weight_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_weight_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_weight_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_weight_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_weight_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_weight_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_weight_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_weight_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_weight_RVALID : IN STD_LOGIC;
    m_axi_kernel_weight_RREADY : OUT STD_LOGIC;
    m_axi_kernel_weight_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_weight_RLAST : IN STD_LOGIC;
    m_axi_kernel_weight_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_weight_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_kernel_weight_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_weight_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_weight_BVALID : IN STD_LOGIC;
    m_axi_kernel_weight_BREADY : OUT STD_LOGIC;
    m_axi_kernel_weight_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_weight_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_weight_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln181 : IN STD_LOGIC_VECTOR (61 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_we0 : OUT STD_LOGIC;
    weight_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_cnn_load_weight_S0_Pipeline_VITIS_LOOP_181_1_VITIS_LOOP_182_2_VITIS_LOOP_183_3_VITIS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_19000 : STD_LOGIC_VECTOR (16 downto 0) := "11001000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv14_1900 : STD_LOGIC_VECTOR (13 downto 0) := "01100100000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln181_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal kernel_weight_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln183_fu_343_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln183_reg_568 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln183_1_fu_351_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln183_1_reg_573 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln204_fu_375_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln204_reg_578 : STD_LOGIC_VECTOR (13 downto 0);
    signal kernel_weight_addr_read_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln204_5_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i3_fu_86 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln184_fu_381_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i2_fu_90 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal indvar_flatten_fu_94 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln183_2_fu_393_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal i1_fu_98 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal select_ln182_1_fu_317_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten12_fu_102 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal select_ln182_2_fu_407_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal i0_fu_106 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln181_1_fu_265_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten34_fu_110 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal add_ln181_fu_186_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_allocacmp_indvar_flatten34_load : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln182_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln183_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln181_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln181_1_fu_221_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln181_fu_233_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln181_1_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln182_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln182_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln182_1_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln181_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln184_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln182_fu_273_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln182_fu_285_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln182_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln183_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln183_1_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln183_fu_325_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_359_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln182_fu_367_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln204_fu_371_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln183_1_fu_387_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln182_1_fu_401_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_fu_448_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln204_1_fu_445_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln204_1_fu_455_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln204_2_fu_461_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln204_2_fu_464_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln204_fu_474_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_fu_478_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln204_3_fu_470_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln204_3_fu_486_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln204_4_fu_492_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln204_4_fu_495_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_cnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component kernel_cnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i0_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i0_fu_106 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i0_fu_106 <= select_ln181_1_fu_265_p3;
                end if;
            end if; 
        end if;
    end process;

    i1_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i1_fu_98 <= ap_const_lv9_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i1_fu_98 <= select_ln182_1_fu_317_p3;
                end if;
            end if; 
        end if;
    end process;

    i2_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i2_fu_90 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i2_fu_90 <= select_ln183_1_fu_351_p3;
                end if;
            end if; 
        end if;
    end process;

    i3_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i3_fu_86 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i3_fu_86 <= add_ln184_fu_381_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten12_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten12_fu_102 <= ap_const_lv14_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    indvar_flatten12_fu_102 <= select_ln182_2_fu_407_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten34_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln181_fu_180_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten34_fu_110 <= add_ln181_fu_186_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten34_fu_110 <= ap_const_lv17_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_94 <= ap_const_lv6_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    indvar_flatten_fu_94 <= select_ln183_2_fu_393_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln204_reg_578 <= add_ln204_fu_375_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                kernel_weight_addr_read_reg_584 <= m_axi_kernel_weight_RDATA;
                select_ln183_1_reg_573 <= select_ln183_1_fu_351_p3;
                select_ln183_reg_568 <= select_ln183_fu_343_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln181_1_fu_221_p2 <= std_logic_vector(unsigned(i0_fu_106) + unsigned(ap_const_lv5_1));
    add_ln181_fu_186_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten34_load) + unsigned(ap_const_lv17_1));
    add_ln182_1_fu_401_p2 <= std_logic_vector(unsigned(indvar_flatten12_fu_102) + unsigned(ap_const_lv14_1));
    add_ln182_fu_273_p2 <= std_logic_vector(unsigned(select_ln181_fu_233_p3) + unsigned(ap_const_lv9_1));
    add_ln183_1_fu_387_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_94) + unsigned(ap_const_lv6_1));
    add_ln183_fu_325_p2 <= std_logic_vector(unsigned(select_ln182_fu_285_p3) + unsigned(ap_const_lv3_1));
    add_ln184_fu_381_p2 <= std_logic_vector(unsigned(select_ln183_fu_343_p3) + unsigned(ap_const_lv3_1));
    add_ln204_1_fu_455_p2 <= std_logic_vector(unsigned(tmp_4_fu_448_p3) + unsigned(zext_ln204_1_fu_445_p1));
    add_ln204_2_fu_464_p2 <= std_logic_vector(unsigned(add_ln204_1_fu_455_p2) + unsigned(zext_ln204_2_fu_461_p1));
    add_ln204_3_fu_486_p2 <= std_logic_vector(unsigned(tmp_5_fu_478_p3) + unsigned(zext_ln204_3_fu_470_p1));
    add_ln204_4_fu_495_p2 <= std_logic_vector(unsigned(add_ln204_3_fu_486_p2) + unsigned(zext_ln204_4_fu_492_p1));
    add_ln204_fu_375_p2 <= std_logic_vector(unsigned(zext_ln182_fu_367_p1) + unsigned(zext_ln204_fu_371_p1));
    and_ln181_1_fu_259_p2 <= (xor_ln181_fu_241_p2 and icmp_ln183_fu_253_p2);
    and_ln181_fu_305_p2 <= (xor_ln181_fu_241_p2 and or_ln182_1_fu_299_p2);
    and_ln182_fu_311_p2 <= (icmp_ln184_fu_247_p2 and and_ln181_fu_305_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_kernel_weight_RVALID)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (m_axi_kernel_weight_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln181_fu_180_p2)
    begin
        if (((icmp_ln181_fu_180_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten34_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten34_fu_110)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten34_load <= ap_const_lv17_0;
        else 
            ap_sig_allocacmp_indvar_flatten34_load <= indvar_flatten34_fu_110;
        end if; 
    end process;

    icmp_ln181_fu_180_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten34_load = ap_const_lv17_19000) else "0";
    icmp_ln182_fu_227_p2 <= "1" when (indvar_flatten12_fu_102 = ap_const_lv14_1900) else "0";
    icmp_ln183_fu_253_p2 <= "1" when (indvar_flatten_fu_94 = ap_const_lv6_19) else "0";
    icmp_ln184_fu_247_p2 <= "1" when (i3_fu_86 = ap_const_lv3_5) else "0";

    kernel_weight_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_kernel_weight_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            kernel_weight_blk_n_R <= m_axi_kernel_weight_RVALID;
        else 
            kernel_weight_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_kernel_weight_ARADDR <= ap_const_lv64_0;
    m_axi_kernel_weight_ARBURST <= ap_const_lv2_0;
    m_axi_kernel_weight_ARCACHE <= ap_const_lv4_0;
    m_axi_kernel_weight_ARID <= ap_const_lv1_0;
    m_axi_kernel_weight_ARLEN <= ap_const_lv32_0;
    m_axi_kernel_weight_ARLOCK <= ap_const_lv2_0;
    m_axi_kernel_weight_ARPROT <= ap_const_lv3_0;
    m_axi_kernel_weight_ARQOS <= ap_const_lv4_0;
    m_axi_kernel_weight_ARREGION <= ap_const_lv4_0;
    m_axi_kernel_weight_ARSIZE <= ap_const_lv3_0;
    m_axi_kernel_weight_ARUSER <= ap_const_lv1_0;
    m_axi_kernel_weight_ARVALID <= ap_const_logic_0;
    m_axi_kernel_weight_AWADDR <= ap_const_lv64_0;
    m_axi_kernel_weight_AWBURST <= ap_const_lv2_0;
    m_axi_kernel_weight_AWCACHE <= ap_const_lv4_0;
    m_axi_kernel_weight_AWID <= ap_const_lv1_0;
    m_axi_kernel_weight_AWLEN <= ap_const_lv32_0;
    m_axi_kernel_weight_AWLOCK <= ap_const_lv2_0;
    m_axi_kernel_weight_AWPROT <= ap_const_lv3_0;
    m_axi_kernel_weight_AWQOS <= ap_const_lv4_0;
    m_axi_kernel_weight_AWREGION <= ap_const_lv4_0;
    m_axi_kernel_weight_AWSIZE <= ap_const_lv3_0;
    m_axi_kernel_weight_AWUSER <= ap_const_lv1_0;
    m_axi_kernel_weight_AWVALID <= ap_const_logic_0;
    m_axi_kernel_weight_BREADY <= ap_const_logic_0;

    m_axi_kernel_weight_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_kernel_weight_RREADY <= ap_const_logic_1;
        else 
            m_axi_kernel_weight_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_kernel_weight_WDATA <= ap_const_lv32_0;
    m_axi_kernel_weight_WID <= ap_const_lv1_0;
    m_axi_kernel_weight_WLAST <= ap_const_logic_0;
    m_axi_kernel_weight_WSTRB <= ap_const_lv4_0;
    m_axi_kernel_weight_WUSER <= ap_const_lv1_0;
    m_axi_kernel_weight_WVALID <= ap_const_logic_0;
    or_ln182_1_fu_299_p2 <= (xor_ln182_fu_293_p2 or icmp_ln182_fu_227_p2);
    or_ln182_fu_279_p2 <= (icmp_ln182_fu_227_p2 or and_ln181_1_fu_259_p2);
    or_ln183_1_fu_337_p2 <= (or_ln183_fu_331_p2 or icmp_ln182_fu_227_p2);
    or_ln183_fu_331_p2 <= (and_ln182_fu_311_p2 or and_ln181_1_fu_259_p2);
    select_ln181_1_fu_265_p3 <= 
        add_ln181_1_fu_221_p2 when (icmp_ln182_fu_227_p2(0) = '1') else 
        i0_fu_106;
    select_ln181_fu_233_p3 <= 
        ap_const_lv9_0 when (icmp_ln182_fu_227_p2(0) = '1') else 
        i1_fu_98;
    select_ln182_1_fu_317_p3 <= 
        add_ln182_fu_273_p2 when (and_ln181_1_fu_259_p2(0) = '1') else 
        select_ln181_fu_233_p3;
    select_ln182_2_fu_407_p3 <= 
        ap_const_lv14_1 when (icmp_ln182_fu_227_p2(0) = '1') else 
        add_ln182_1_fu_401_p2;
    select_ln182_fu_285_p3 <= 
        ap_const_lv3_0 when (or_ln182_fu_279_p2(0) = '1') else 
        i2_fu_90;
    select_ln183_1_fu_351_p3 <= 
        add_ln183_fu_325_p2 when (and_ln182_fu_311_p2(0) = '1') else 
        select_ln182_fu_285_p3;
    select_ln183_2_fu_393_p3 <= 
        ap_const_lv6_1 when (or_ln182_fu_279_p2(0) = '1') else 
        add_ln183_1_fu_387_p2;
    select_ln183_fu_343_p3 <= 
        ap_const_lv3_0 when (or_ln183_1_fu_337_p2(0) = '1') else 
        i3_fu_86;
    tmp_4_fu_448_p3 <= (add_ln204_reg_578 & ap_const_lv2_0);
    tmp_5_fu_478_p3 <= (trunc_ln204_fu_474_p1 & ap_const_lv2_0);
    tmp_fu_359_p3 <= (select_ln181_1_fu_265_p3 & ap_const_lv8_0);
    trunc_ln204_fu_474_p1 <= add_ln204_2_fu_464_p2(15 - 1 downto 0);
    weight_address0 <= zext_ln204_5_fu_501_p1(17 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_d0 <= kernel_weight_addr_read_reg_584;

    weight_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weight_we0 <= ap_const_logic_1;
        else 
            weight_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln181_fu_241_p2 <= (icmp_ln182_fu_227_p2 xor ap_const_lv1_1);
    xor_ln182_fu_293_p2 <= (icmp_ln183_fu_253_p2 xor ap_const_lv1_1);
    zext_ln182_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_359_p3),14));
    zext_ln204_1_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln204_reg_578),16));
    zext_ln204_2_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln183_1_reg_573),16));
    zext_ln204_3_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln204_2_fu_464_p2),17));
    zext_ln204_4_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln183_reg_568),17));
    zext_ln204_5_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln204_4_fu_495_p2),64));
    zext_ln204_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln182_1_fu_317_p3),14));
end behav;
