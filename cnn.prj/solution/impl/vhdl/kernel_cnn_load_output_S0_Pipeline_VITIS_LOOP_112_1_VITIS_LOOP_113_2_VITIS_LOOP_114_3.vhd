-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_cnn_load_output_S0_Pipeline_VITIS_LOOP_112_1_VITIS_LOOP_113_2_VITIS_LOOP_114_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_kernel_output_AWVALID : OUT STD_LOGIC;
    m_axi_kernel_output_AWREADY : IN STD_LOGIC;
    m_axi_kernel_output_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_kernel_output_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_output_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_output_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_output_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_WVALID : OUT STD_LOGIC;
    m_axi_kernel_output_WREADY : IN STD_LOGIC;
    m_axi_kernel_output_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_kernel_output_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_kernel_output_WLAST : OUT STD_LOGIC;
    m_axi_kernel_output_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_ARVALID : OUT STD_LOGIC;
    m_axi_kernel_output_ARREADY : IN STD_LOGIC;
    m_axi_kernel_output_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_kernel_output_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_output_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_output_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_output_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_output_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_RVALID : IN STD_LOGIC;
    m_axi_kernel_output_RREADY : OUT STD_LOGIC;
    m_axi_kernel_output_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_kernel_output_RLAST : IN STD_LOGIC;
    m_axi_kernel_output_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_kernel_output_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_BVALID : IN STD_LOGIC;
    m_axi_kernel_output_BREADY : OUT STD_LOGIC;
    m_axi_kernel_output_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_output_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_output_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln112 : IN STD_LOGIC_VECTOR (57 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_we0 : OUT STD_LOGIC;
    output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_1_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_1_ce0 : OUT STD_LOGIC;
    output_1_we0 : OUT STD_LOGIC;
    output_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_2_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_2_ce0 : OUT STD_LOGIC;
    output_2_we0 : OUT STD_LOGIC;
    output_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_3_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_3_ce0 : OUT STD_LOGIC;
    output_3_we0 : OUT STD_LOGIC;
    output_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_4_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_4_ce0 : OUT STD_LOGIC;
    output_4_we0 : OUT STD_LOGIC;
    output_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_5_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_5_ce0 : OUT STD_LOGIC;
    output_5_we0 : OUT STD_LOGIC;
    output_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_6_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_6_ce0 : OUT STD_LOGIC;
    output_6_we0 : OUT STD_LOGIC;
    output_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_7_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_7_ce0 : OUT STD_LOGIC;
    output_7_we0 : OUT STD_LOGIC;
    output_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_8_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_8_ce0 : OUT STD_LOGIC;
    output_8_we0 : OUT STD_LOGIC;
    output_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_9_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_9_ce0 : OUT STD_LOGIC;
    output_9_we0 : OUT STD_LOGIC;
    output_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_10_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_10_ce0 : OUT STD_LOGIC;
    output_10_we0 : OUT STD_LOGIC;
    output_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_11_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_11_ce0 : OUT STD_LOGIC;
    output_11_we0 : OUT STD_LOGIC;
    output_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_12_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_12_ce0 : OUT STD_LOGIC;
    output_12_we0 : OUT STD_LOGIC;
    output_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_13_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_13_ce0 : OUT STD_LOGIC;
    output_13_we0 : OUT STD_LOGIC;
    output_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_14_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_14_ce0 : OUT STD_LOGIC;
    output_14_we0 : OUT STD_LOGIC;
    output_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_15_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_15_ce0 : OUT STD_LOGIC;
    output_15_we0 : OUT STD_LOGIC;
    output_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel_cnn_load_output_S0_Pipeline_VITIS_LOOP_112_1_VITIS_LOOP_113_2_VITIS_LOOP_114_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_C400 : STD_LOGIC_VECTOR (15 downto 0) := "1100010000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv12_C40 : STD_LOGIC_VECTOR (11 downto 0) := "110001000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln112_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal kernel_output_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln113_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_1002 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln112_1_fu_488_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln112_1_reg_1009 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln133_1_fu_673_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln133_1_reg_1015 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln126_fu_679_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln126_reg_1020 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln126_1_reg_1025 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln126_2_reg_1030 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln126_3_reg_1035 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln126_4_reg_1040 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln126_5_reg_1045 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln126_6_reg_1050 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln126_7_reg_1055 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln126_8_reg_1060 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln126_9_reg_1065 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln126_s_reg_1070 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln126_10_reg_1075 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln126_11_reg_1080 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln126_12_reg_1085 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln126_13_reg_1090 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln126_14_reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln133_4_fu_868_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i2_fu_178 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln114_fu_833_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal indvar_fu_182 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln114_fu_845_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_fu_186 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln113_1_fu_583_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_190 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal select_ln113_2_fu_502_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal i0_fu_194 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal indvar_flatten13_fu_198 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln112_fu_464_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln112_1_fu_476_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln113_1_fu_496_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln114_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln112_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln112_fu_540_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln112_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln113_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln113_fu_564_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_591_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_fu_602_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln133_fu_598_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln133_1_fu_609_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln133_fu_613_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln113_fu_619_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln133_2_fu_623_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln133_fu_627_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln133_fu_633_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_637_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_645_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln113_fu_575_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_659_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln133_1_fu_653_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln133_3_fu_669_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln114_1_fu_839_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_cnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component kernel_cnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i0_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i0_fu_194 <= ap_const_lv5_0;
                elsif (((icmp_ln112_fu_458_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i0_fu_194 <= select_ln112_1_fu_488_p3;
                end if;
            end if; 
        end if;
    end process;

    i1_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i1_fu_186 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    i1_fu_186 <= select_ln113_1_fu_583_p3;
                end if;
            end if; 
        end if;
    end process;

    i2_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i2_fu_178 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    i2_fu_178 <= add_ln114_fu_833_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_198 <= ap_const_lv16_0;
                elsif (((icmp_ln112_fu_458_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten13_fu_198 <= add_ln112_fu_464_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_190 <= ap_const_lv12_0;
                elsif (((icmp_ln112_fu_458_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_190 <= select_ln113_2_fu_502_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    indvar_fu_182 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    indvar_fu_182 <= select_ln114_fu_845_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln133_1_reg_1015 <= add_ln133_1_fu_673_p2;
                trunc_ln126_10_reg_1075 <= m_axi_kernel_output_RDATA(383 downto 352);
                trunc_ln126_11_reg_1080 <= m_axi_kernel_output_RDATA(415 downto 384);
                trunc_ln126_12_reg_1085 <= m_axi_kernel_output_RDATA(447 downto 416);
                trunc_ln126_13_reg_1090 <= m_axi_kernel_output_RDATA(479 downto 448);
                trunc_ln126_14_reg_1095 <= m_axi_kernel_output_RDATA(511 downto 480);
                trunc_ln126_1_reg_1025 <= m_axi_kernel_output_RDATA(63 downto 32);
                trunc_ln126_2_reg_1030 <= m_axi_kernel_output_RDATA(95 downto 64);
                trunc_ln126_3_reg_1035 <= m_axi_kernel_output_RDATA(127 downto 96);
                trunc_ln126_4_reg_1040 <= m_axi_kernel_output_RDATA(159 downto 128);
                trunc_ln126_5_reg_1045 <= m_axi_kernel_output_RDATA(191 downto 160);
                trunc_ln126_6_reg_1050 <= m_axi_kernel_output_RDATA(223 downto 192);
                trunc_ln126_7_reg_1055 <= m_axi_kernel_output_RDATA(255 downto 224);
                trunc_ln126_8_reg_1060 <= m_axi_kernel_output_RDATA(287 downto 256);
                trunc_ln126_9_reg_1065 <= m_axi_kernel_output_RDATA(319 downto 288);
                trunc_ln126_reg_1020 <= trunc_ln126_fu_679_p1;
                trunc_ln126_s_reg_1070 <= m_axi_kernel_output_RDATA(351 downto 320);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln113_reg_1002 <= icmp_ln113_fu_482_p2;
                select_ln112_1_reg_1009 <= select_ln112_1_fu_488_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln112_1_fu_476_p2 <= std_logic_vector(unsigned(i0_fu_194) + unsigned(ap_const_lv5_1));
    add_ln112_fu_464_p2 <= std_logic_vector(unsigned(indvar_flatten13_fu_198) + unsigned(ap_const_lv16_1));
    add_ln113_1_fu_496_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_190) + unsigned(ap_const_lv12_1));
    add_ln113_fu_564_p2 <= std_logic_vector(unsigned(select_ln112_fu_540_p3) + unsigned(ap_const_lv8_1));
    add_ln114_1_fu_839_p2 <= std_logic_vector(unsigned(indvar_fu_182) + unsigned(ap_const_lv4_1));
    add_ln114_fu_833_p2 <= std_logic_vector(unsigned(select_ln113_fu_575_p3) + unsigned(ap_const_lv8_10));
    add_ln133_1_fu_673_p2 <= std_logic_vector(unsigned(sub_ln133_1_fu_653_p2) + unsigned(zext_ln133_3_fu_669_p1));
    add_ln133_fu_627_p2 <= std_logic_vector(signed(sext_ln113_fu_619_p1) + signed(zext_ln133_2_fu_623_p1));
    and_ln112_fu_558_p2 <= (xor_ln112_fu_547_p2 and icmp_ln114_fu_552_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(m_axi_kernel_output_RVALID)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (m_axi_kernel_output_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln112_fu_458_p2)
    begin
        if (((icmp_ln112_fu_458_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln112_fu_458_p2 <= "1" when (indvar_flatten13_fu_198 = ap_const_lv16_C400) else "0";
    icmp_ln113_fu_482_p2 <= "1" when (indvar_flatten_fu_190 = ap_const_lv12_C40) else "0";
    icmp_ln114_fu_552_p2 <= "1" when (indvar_fu_182 = ap_const_lv4_E) else "0";

    kernel_output_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_kernel_output_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            kernel_output_blk_n_R <= m_axi_kernel_output_RVALID;
        else 
            kernel_output_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    lshr_ln_fu_659_p4 <= select_ln113_fu_575_p3(7 downto 4);
    m_axi_kernel_output_ARADDR <= ap_const_lv64_0;
    m_axi_kernel_output_ARBURST <= ap_const_lv2_0;
    m_axi_kernel_output_ARCACHE <= ap_const_lv4_0;
    m_axi_kernel_output_ARID <= ap_const_lv1_0;
    m_axi_kernel_output_ARLEN <= ap_const_lv32_0;
    m_axi_kernel_output_ARLOCK <= ap_const_lv2_0;
    m_axi_kernel_output_ARPROT <= ap_const_lv3_0;
    m_axi_kernel_output_ARQOS <= ap_const_lv4_0;
    m_axi_kernel_output_ARREGION <= ap_const_lv4_0;
    m_axi_kernel_output_ARSIZE <= ap_const_lv3_0;
    m_axi_kernel_output_ARUSER <= ap_const_lv1_0;
    m_axi_kernel_output_ARVALID <= ap_const_logic_0;
    m_axi_kernel_output_AWADDR <= ap_const_lv64_0;
    m_axi_kernel_output_AWBURST <= ap_const_lv2_0;
    m_axi_kernel_output_AWCACHE <= ap_const_lv4_0;
    m_axi_kernel_output_AWID <= ap_const_lv1_0;
    m_axi_kernel_output_AWLEN <= ap_const_lv32_0;
    m_axi_kernel_output_AWLOCK <= ap_const_lv2_0;
    m_axi_kernel_output_AWPROT <= ap_const_lv3_0;
    m_axi_kernel_output_AWQOS <= ap_const_lv4_0;
    m_axi_kernel_output_AWREGION <= ap_const_lv4_0;
    m_axi_kernel_output_AWSIZE <= ap_const_lv3_0;
    m_axi_kernel_output_AWUSER <= ap_const_lv1_0;
    m_axi_kernel_output_AWVALID <= ap_const_logic_0;
    m_axi_kernel_output_BREADY <= ap_const_logic_0;

    m_axi_kernel_output_RREADY_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axi_kernel_output_RREADY <= ap_const_logic_1;
        else 
            m_axi_kernel_output_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_kernel_output_WDATA <= ap_const_lv512_lc_1;
    m_axi_kernel_output_WID <= ap_const_lv1_0;
    m_axi_kernel_output_WLAST <= ap_const_logic_0;
    m_axi_kernel_output_WSTRB <= ap_const_lv64_0;
    m_axi_kernel_output_WUSER <= ap_const_lv1_0;
    m_axi_kernel_output_WVALID <= ap_const_logic_0;
    or_ln113_fu_570_p2 <= (icmp_ln113_reg_1002 or and_ln112_fu_558_p2);
    output_0_address0 <= zext_ln133_4_fu_868_p1(16 - 1 downto 0);

    output_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_d0 <= trunc_ln126_reg_1020;

    output_0_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_0_we0 <= ap_const_logic_1;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_10_address0 <= zext_ln133_4_fu_868_p1(16 - 1 downto 0);

    output_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_10_ce0 <= ap_const_logic_1;
        else 
            output_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_10_d0 <= trunc_ln126_s_reg_1070;

    output_10_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_10_we0 <= ap_const_logic_1;
        else 
            output_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_11_address0 <= zext_ln133_4_fu_868_p1(16 - 1 downto 0);

    output_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_11_ce0 <= ap_const_logic_1;
        else 
            output_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_11_d0 <= trunc_ln126_10_reg_1075;

    output_11_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_11_we0 <= ap_const_logic_1;
        else 
            output_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_12_address0 <= zext_ln133_4_fu_868_p1(16 - 1 downto 0);

    output_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_12_ce0 <= ap_const_logic_1;
        else 
            output_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_12_d0 <= trunc_ln126_11_reg_1080;

    output_12_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_12_we0 <= ap_const_logic_1;
        else 
            output_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_13_address0 <= zext_ln133_4_fu_868_p1(16 - 1 downto 0);

    output_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_13_ce0 <= ap_const_logic_1;
        else 
            output_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_13_d0 <= trunc_ln126_12_reg_1085;

    output_13_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_13_we0 <= ap_const_logic_1;
        else 
            output_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_14_address0 <= zext_ln133_4_fu_868_p1(16 - 1 downto 0);

    output_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_14_ce0 <= ap_const_logic_1;
        else 
            output_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_14_d0 <= trunc_ln126_13_reg_1090;

    output_14_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_14_we0 <= ap_const_logic_1;
        else 
            output_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_15_address0 <= zext_ln133_4_fu_868_p1(16 - 1 downto 0);

    output_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_15_ce0 <= ap_const_logic_1;
        else 
            output_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_15_d0 <= trunc_ln126_14_reg_1095;

    output_15_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_15_we0 <= ap_const_logic_1;
        else 
            output_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_address0 <= zext_ln133_4_fu_868_p1(16 - 1 downto 0);

    output_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_1_ce0 <= ap_const_logic_1;
        else 
            output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_d0 <= trunc_ln126_1_reg_1025;

    output_1_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_1_we0 <= ap_const_logic_1;
        else 
            output_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_address0 <= zext_ln133_4_fu_868_p1(16 - 1 downto 0);

    output_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_2_ce0 <= ap_const_logic_1;
        else 
            output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_d0 <= trunc_ln126_2_reg_1030;

    output_2_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_2_we0 <= ap_const_logic_1;
        else 
            output_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_address0 <= zext_ln133_4_fu_868_p1(16 - 1 downto 0);

    output_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_3_ce0 <= ap_const_logic_1;
        else 
            output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_d0 <= trunc_ln126_3_reg_1035;

    output_3_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_3_we0 <= ap_const_logic_1;
        else 
            output_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_4_address0 <= zext_ln133_4_fu_868_p1(16 - 1 downto 0);

    output_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_4_ce0 <= ap_const_logic_1;
        else 
            output_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_4_d0 <= trunc_ln126_4_reg_1040;

    output_4_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_4_we0 <= ap_const_logic_1;
        else 
            output_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_5_address0 <= zext_ln133_4_fu_868_p1(16 - 1 downto 0);

    output_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_5_ce0 <= ap_const_logic_1;
        else 
            output_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_5_d0 <= trunc_ln126_5_reg_1045;

    output_5_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_5_we0 <= ap_const_logic_1;
        else 
            output_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_6_address0 <= zext_ln133_4_fu_868_p1(16 - 1 downto 0);

    output_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_6_ce0 <= ap_const_logic_1;
        else 
            output_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_6_d0 <= trunc_ln126_6_reg_1050;

    output_6_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_6_we0 <= ap_const_logic_1;
        else 
            output_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_7_address0 <= zext_ln133_4_fu_868_p1(16 - 1 downto 0);

    output_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_7_ce0 <= ap_const_logic_1;
        else 
            output_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_7_d0 <= trunc_ln126_7_reg_1055;

    output_7_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_7_we0 <= ap_const_logic_1;
        else 
            output_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_8_address0 <= zext_ln133_4_fu_868_p1(16 - 1 downto 0);

    output_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_8_ce0 <= ap_const_logic_1;
        else 
            output_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_8_d0 <= trunc_ln126_8_reg_1060;

    output_8_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_8_we0 <= ap_const_logic_1;
        else 
            output_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_9_address0 <= zext_ln133_4_fu_868_p1(16 - 1 downto 0);

    output_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_9_ce0 <= ap_const_logic_1;
        else 
            output_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_9_d0 <= trunc_ln126_9_reg_1065;

    output_9_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_9_we0 <= ap_const_logic_1;
        else 
            output_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln112_1_fu_488_p3 <= 
        add_ln112_1_fu_476_p2 when (icmp_ln113_fu_482_p2(0) = '1') else 
        i0_fu_194;
    select_ln112_fu_540_p3 <= 
        ap_const_lv8_0 when (icmp_ln113_reg_1002(0) = '1') else 
        i1_fu_186;
    select_ln113_1_fu_583_p3 <= 
        add_ln113_fu_564_p2 when (and_ln112_fu_558_p2(0) = '1') else 
        select_ln112_fu_540_p3;
    select_ln113_2_fu_502_p3 <= 
        ap_const_lv12_1 when (icmp_ln113_fu_482_p2(0) = '1') else 
        add_ln113_1_fu_496_p2;
    select_ln113_fu_575_p3 <= 
        ap_const_lv8_0 when (or_ln113_fu_570_p2(0) = '1') else 
        i2_fu_178;
    select_ln114_fu_845_p3 <= 
        ap_const_lv4_1 when (or_ln113_fu_570_p2(0) = '1') else 
        add_ln114_1_fu_839_p2;
        sext_ln113_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln133_fu_613_p2),15));

    sub_ln133_1_fu_653_p2 <= std_logic_vector(unsigned(tmp_7_fu_637_p3) - unsigned(tmp_8_fu_645_p3));
    sub_ln133_fu_613_p2 <= std_logic_vector(unsigned(zext_ln133_fu_598_p1) - unsigned(zext_ln133_1_fu_609_p1));
    tmp_6_fu_602_p3 <= (select_ln112_1_reg_1009 & ap_const_lv5_0);
    tmp_7_fu_637_p3 <= (trunc_ln133_fu_633_p1 & ap_const_lv4_0);
    tmp_8_fu_645_p3 <= (add_ln133_fu_627_p2 & ap_const_lv1_0);
    tmp_fu_591_p3 <= (select_ln112_1_reg_1009 & ap_const_lv8_0);
    trunc_ln126_fu_679_p1 <= m_axi_kernel_output_RDATA(32 - 1 downto 0);
    trunc_ln133_fu_633_p1 <= add_ln133_fu_627_p2(12 - 1 downto 0);
    xor_ln112_fu_547_p2 <= (icmp_ln113_reg_1002 xor ap_const_lv1_1);
    zext_ln133_1_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_602_p3),14));
    zext_ln133_2_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln113_1_fu_583_p3),15));
    zext_ln133_3_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_659_p4),16));
    zext_ln133_4_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln133_1_reg_1015),64));
    zext_ln133_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_591_p3),14));
end behav;
