#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("m_axi_kernel_input_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_kernel_input_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_kernel_input_AWADDR", 64, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_kernel_input_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_kernel_input_AWLEN", 8, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_kernel_input_AWSIZE", 3, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_kernel_input_AWBURST", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_kernel_input_AWLOCK", 2, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_kernel_input_AWCACHE", 4, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_kernel_input_AWPROT", 3, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_kernel_input_AWQOS", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_kernel_input_AWREGION", 4, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_kernel_input_AWUSER", 1, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_kernel_input_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_kernel_input_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_kernel_input_WDATA", 128, hls_out, 0, "m_axi", "FIFONUM", 1),
	Port_Property("m_axi_kernel_input_WSTRB", 16, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_kernel_input_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_kernel_input_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_kernel_input_WUSER", 1, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_kernel_input_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_kernel_input_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_kernel_input_ARADDR", 64, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_kernel_input_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_kernel_input_ARLEN", 8, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_kernel_input_ARSIZE", 3, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_kernel_input_ARBURST", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_kernel_input_ARLOCK", 2, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_kernel_input_ARCACHE", 4, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_kernel_input_ARPROT", 3, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_kernel_input_ARQOS", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_kernel_input_ARREGION", 4, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_kernel_input_ARUSER", 1, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_kernel_input_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_kernel_input_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_kernel_input_RDATA", 128, hls_in, 0, "m_axi", "FIFONUM", 1),
	Port_Property("m_axi_kernel_input_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_kernel_input_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_kernel_input_RUSER", 1, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_kernel_input_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_kernel_input_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_kernel_input_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_kernel_input_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_kernel_input_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_kernel_input_BUSER", 1, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_kernel_weight_AWVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_kernel_weight_AWREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_kernel_weight_AWADDR", 64, hls_out, 1, "m_axi", "ADDR", 1),
	Port_Property("m_axi_kernel_weight_AWID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_kernel_weight_AWLEN", 8, hls_out, 1, "m_axi", "SIZE", 1),
	Port_Property("m_axi_kernel_weight_AWSIZE", 3, hls_out, 1, "m_axi", "BURST", 1),
	Port_Property("m_axi_kernel_weight_AWBURST", 2, hls_out, 1, "m_axi", "LOCK", 1),
	Port_Property("m_axi_kernel_weight_AWLOCK", 2, hls_out, 1, "m_axi", "CACHE", 1),
	Port_Property("m_axi_kernel_weight_AWCACHE", 4, hls_out, 1, "m_axi", "PROT", 1),
	Port_Property("m_axi_kernel_weight_AWPROT", 3, hls_out, 1, "m_axi", "QOS", 1),
	Port_Property("m_axi_kernel_weight_AWQOS", 4, hls_out, 1, "m_axi", "REGION", 1),
	Port_Property("m_axi_kernel_weight_AWREGION", 4, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_kernel_weight_AWUSER", 1, hls_out, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_kernel_weight_WVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_kernel_weight_WREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_kernel_weight_WDATA", 32, hls_out, 1, "m_axi", "FIFONUM", 1),
	Port_Property("m_axi_kernel_weight_WSTRB", 4, hls_out, 1, "m_axi", "STRB", 1),
	Port_Property("m_axi_kernel_weight_WLAST", 1, hls_out, 1, "m_axi", "LAST", 1),
	Port_Property("m_axi_kernel_weight_WID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_kernel_weight_WUSER", 1, hls_out, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_kernel_weight_ARVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_kernel_weight_ARREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_kernel_weight_ARADDR", 64, hls_out, 1, "m_axi", "ADDR", 1),
	Port_Property("m_axi_kernel_weight_ARID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_kernel_weight_ARLEN", 8, hls_out, 1, "m_axi", "SIZE", 1),
	Port_Property("m_axi_kernel_weight_ARSIZE", 3, hls_out, 1, "m_axi", "BURST", 1),
	Port_Property("m_axi_kernel_weight_ARBURST", 2, hls_out, 1, "m_axi", "LOCK", 1),
	Port_Property("m_axi_kernel_weight_ARLOCK", 2, hls_out, 1, "m_axi", "CACHE", 1),
	Port_Property("m_axi_kernel_weight_ARCACHE", 4, hls_out, 1, "m_axi", "PROT", 1),
	Port_Property("m_axi_kernel_weight_ARPROT", 3, hls_out, 1, "m_axi", "QOS", 1),
	Port_Property("m_axi_kernel_weight_ARQOS", 4, hls_out, 1, "m_axi", "REGION", 1),
	Port_Property("m_axi_kernel_weight_ARREGION", 4, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_kernel_weight_ARUSER", 1, hls_out, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_kernel_weight_RVALID", 1, hls_in, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_kernel_weight_RREADY", 1, hls_out, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_kernel_weight_RDATA", 32, hls_in, 1, "m_axi", "FIFONUM", 1),
	Port_Property("m_axi_kernel_weight_RLAST", 1, hls_in, 1, "m_axi", "LAST", 1),
	Port_Property("m_axi_kernel_weight_RID", 1, hls_in, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_kernel_weight_RUSER", 1, hls_in, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_kernel_weight_RRESP", 2, hls_in, 1, "m_axi", "RESP", 1),
	Port_Property("m_axi_kernel_weight_BVALID", 1, hls_in, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_kernel_weight_BREADY", 1, hls_out, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_kernel_weight_BRESP", 2, hls_in, 1, "m_axi", "RESP", 1),
	Port_Property("m_axi_kernel_weight_BID", 1, hls_in, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_kernel_weight_BUSER", 1, hls_in, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_kernel_output_AWVALID", 1, hls_out, 2, "m_axi", "VALID", 1),
	Port_Property("m_axi_kernel_output_AWREADY", 1, hls_in, 2, "m_axi", "READY", 1),
	Port_Property("m_axi_kernel_output_AWADDR", 64, hls_out, 2, "m_axi", "ADDR", 1),
	Port_Property("m_axi_kernel_output_AWID", 1, hls_out, 2, "m_axi", "ID", 1),
	Port_Property("m_axi_kernel_output_AWLEN", 8, hls_out, 2, "m_axi", "SIZE", 1),
	Port_Property("m_axi_kernel_output_AWSIZE", 3, hls_out, 2, "m_axi", "BURST", 1),
	Port_Property("m_axi_kernel_output_AWBURST", 2, hls_out, 2, "m_axi", "LOCK", 1),
	Port_Property("m_axi_kernel_output_AWLOCK", 2, hls_out, 2, "m_axi", "CACHE", 1),
	Port_Property("m_axi_kernel_output_AWCACHE", 4, hls_out, 2, "m_axi", "PROT", 1),
	Port_Property("m_axi_kernel_output_AWPROT", 3, hls_out, 2, "m_axi", "QOS", 1),
	Port_Property("m_axi_kernel_output_AWQOS", 4, hls_out, 2, "m_axi", "REGION", 1),
	Port_Property("m_axi_kernel_output_AWREGION", 4, hls_out, 2, "m_axi", "USER", 1),
	Port_Property("m_axi_kernel_output_AWUSER", 1, hls_out, 2, "m_axi", "DATA", 1),
	Port_Property("m_axi_kernel_output_WVALID", 1, hls_out, 2, "m_axi", "VALID", 1),
	Port_Property("m_axi_kernel_output_WREADY", 1, hls_in, 2, "m_axi", "READY", 1),
	Port_Property("m_axi_kernel_output_WDATA", 512, hls_out, 2, "m_axi", "FIFONUM", 1),
	Port_Property("m_axi_kernel_output_WSTRB", 64, hls_out, 2, "m_axi", "STRB", 1),
	Port_Property("m_axi_kernel_output_WLAST", 1, hls_out, 2, "m_axi", "LAST", 1),
	Port_Property("m_axi_kernel_output_WID", 1, hls_out, 2, "m_axi", "ID", 1),
	Port_Property("m_axi_kernel_output_WUSER", 1, hls_out, 2, "m_axi", "DATA", 1),
	Port_Property("m_axi_kernel_output_ARVALID", 1, hls_out, 2, "m_axi", "VALID", 1),
	Port_Property("m_axi_kernel_output_ARREADY", 1, hls_in, 2, "m_axi", "READY", 1),
	Port_Property("m_axi_kernel_output_ARADDR", 64, hls_out, 2, "m_axi", "ADDR", 1),
	Port_Property("m_axi_kernel_output_ARID", 1, hls_out, 2, "m_axi", "ID", 1),
	Port_Property("m_axi_kernel_output_ARLEN", 8, hls_out, 2, "m_axi", "SIZE", 1),
	Port_Property("m_axi_kernel_output_ARSIZE", 3, hls_out, 2, "m_axi", "BURST", 1),
	Port_Property("m_axi_kernel_output_ARBURST", 2, hls_out, 2, "m_axi", "LOCK", 1),
	Port_Property("m_axi_kernel_output_ARLOCK", 2, hls_out, 2, "m_axi", "CACHE", 1),
	Port_Property("m_axi_kernel_output_ARCACHE", 4, hls_out, 2, "m_axi", "PROT", 1),
	Port_Property("m_axi_kernel_output_ARPROT", 3, hls_out, 2, "m_axi", "QOS", 1),
	Port_Property("m_axi_kernel_output_ARQOS", 4, hls_out, 2, "m_axi", "REGION", 1),
	Port_Property("m_axi_kernel_output_ARREGION", 4, hls_out, 2, "m_axi", "USER", 1),
	Port_Property("m_axi_kernel_output_ARUSER", 1, hls_out, 2, "m_axi", "DATA", 1),
	Port_Property("m_axi_kernel_output_RVALID", 1, hls_in, 2, "m_axi", "VALID", 1),
	Port_Property("m_axi_kernel_output_RREADY", 1, hls_out, 2, "m_axi", "READY", 1),
	Port_Property("m_axi_kernel_output_RDATA", 512, hls_in, 2, "m_axi", "FIFONUM", 1),
	Port_Property("m_axi_kernel_output_RLAST", 1, hls_in, 2, "m_axi", "LAST", 1),
	Port_Property("m_axi_kernel_output_RID", 1, hls_in, 2, "m_axi", "ID", 1),
	Port_Property("m_axi_kernel_output_RUSER", 1, hls_in, 2, "m_axi", "DATA", 1),
	Port_Property("m_axi_kernel_output_RRESP", 2, hls_in, 2, "m_axi", "RESP", 1),
	Port_Property("m_axi_kernel_output_BVALID", 1, hls_in, 2, "m_axi", "VALID", 1),
	Port_Property("m_axi_kernel_output_BREADY", 1, hls_out, 2, "m_axi", "READY", 1),
	Port_Property("m_axi_kernel_output_BRESP", 2, hls_in, 2, "m_axi", "RESP", 1),
	Port_Property("m_axi_kernel_output_BID", 1, hls_in, 2, "m_axi", "ID", 1),
	Port_Property("m_axi_kernel_output_BUSER", 1, hls_in, 2, "m_axi", "DATA", 1),
	Port_Property("s_axi_control_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_AWADDR", 6, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_ARADDR", 6, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "kernel_cnn";
